[
  {
      "title": "AG Grid Community Roundup July 2022",
      "creator": "Alan Richardson",
      "pubDate": "2022-08-02T13:11:48.000Z",
      "link": "https://dev.to/ag-grid/ag-grid-community-roundup-july-2022-4m9p",
      "guid": "https://dev.to/ag-grid/ag-grid-community-roundup-july-2022-4m9p",
      "description": "<p>We melted our way through the heat of July to try and find the best of the content on the web related to AG Grid.</p>\n\n<p>We also released a <a href=\"https://blog.ag-grid.com/whats-new-in-ag-grid-28/\">new version of AG Grid</a></p>\n\n<h2>\n  \n  \n  Videos\n</h2>\n\n<p>We found <a href=\"https://www.youtube.com/watch?v=tO-A3LY6Auc&amp;t=2030s\">an interesting video from Valispace</a>, I think it is one of their recruitment videos but it describes their evaluation and adoption process for AG Grid:</p>\n\n<ul>\n<li>How AG Grid chosen?\n\n<ul>\n<li>Aware of the libraries available</li>\n<li>Create a proof of concept using the library quickly</li>\n<li>Explore the main use-cases at a high level</li>\n<li>Evaluate the results</li>\n<li>Test with 100s of thousands of rows</li>\n</ul>\n\n\n</li>\n</ul>\n\n<p><a href=\"https://www.adaptabletools.com/\">AdapTable Tools</a> have been creating quite a few videos recently. And this one shows a demo of their <a href=\"https://www.youtube.com/watch?v=LM1MVLnefGU\">save charts state feature</a>. Adaptable is a great example of how extensible AG Grid is in the right hands and their AG Grid extension can really add a lot of user focussed features instantly when added to your project.</p>\n\n<p><a href=\"https://linkedin.com/in/philip-eschenbacher-57a817b5\">Philip Eschenbacher</a> has created another video in his Mongo DB and AG Grid series showing how to use <a href=\"https://www.youtube.com/watch?v=YCHRW8d46m0\">enhanced Graph QL Searches</a>.</p>\n\n<h2>\n  \n  \n  Blogs\n</h2>\n\n<p>Max Rosenberg wrote a <a href=\"https://www.maxrosenb.com/blog/aggrid-reactquery-tutorial\">blog post showing how to combine React Query with AG Grid</a>. This has been on our internal todo list for quite some time so we are grateful to Max for creating such a good post we can point people towards.</p>\n\n<p><a href=\"https://brianflove.com/\">Brian Love</a> on his consultancy <a href=\"https://liveloveapp.com/services/ag-grid\">Live Live App</a> posted a <a href=\"https://liveloveapp.com/blog/2022-07-14-ag-grid-cell-rendering-pipeline\">blog post about AG Grid Rendering pipeline</a> this explains in detail the ordering and scope of rendering features in AG Grid: value getters then formatters, then renderers.</p>\n\n<p>We also released a few blog posts on the AG Grid blog:</p>\n\n<ul>\n<li><a href=\"https://blog.ag-grid.com/using-playwright-to-test-ag-grid-react-apps/\">Using Playwright to Test AG Grid React Apps</a></li>\n<li><a href=\"https://blog.ag-grid.com/using-ag-grid-in-electron-applications/\">Using AG Grid in Electron Applications</a></li>\n<li><a href=\"https://blog.ag-grid.com/using-react-bootstrap-and-ag-grid/\">Using React-Bootstrap and AG Grid</a></li>\n<li><a href=\"https://blog.ag-grid.com/how-to-optimize-a-react-application-using-hooks-and-ag-grid/\">How to Optimize a React Application Using Hooks and AG Grid</a></li>\n<li><a href=\"https://blog.ag-grid.com/typescript-generics/\">Typescript Generics</a></li>\n<li><a href=\"https://blog.ag-grid.com/why-use-a-third-party-data-grid-component/\">Why Use a Third-Party Data Grid Component?</a></li>\n</ul>\n\n<h2>\n  \n  \n  Apps\n</h2>\n\n<p>We found quite a few apps using AG Grid that we were not aware of and added a <a href=\"https://blog.ag-grid.com/showcase/#opensourceprojectsusingaggrid\">Github section on our sample apps page</a> which lists interesting projects that use AG Grid and release their code on Github.</p>\n\n<p>A few projects to take a look at that we became aware of recently:</p>\n\n<ul>\n<li><p><a href=\"https://lowdefy.com/\">Lowdefy</a> is a low code tool that uses AG Grid as a block component, allowing you to create apps which render data in AG Grid without a lot of coding knowledge. There is <a href=\"https://example-reporting.lowdefy.com/report\">a Lowdefy example using AG Grid here</a>.</p></li>\n<li><p>The <a href=\"https://github.com/systelab/systelab-components\">Systelab Component Library</a> has common components for Angular. AG Grid is used as the grid component in their <a href=\"https://systelab.github.io/components/\">'tables' component showcase</a>.</p></li>\n<li><p>Consta Design have created a <a href=\"https://github.com/consta-design-system/ag-grid-adapter\">React component that wraps AG Grid</a> to provide some formatting and editing components. You can see it in action in their <a href=\"https://ag-grid-adapter.consta.design/?path=/story/common-start--page\">Storybook implementation</a>.</p></li>\n</ul>\n\n<p>There are many more on the <a href=\"https://blog.ag-grid.com/showcase/#opensourceprojectsusingaggrid\">Sample Apps Page</a></p>\n\n<h2>\n  \n  \n  Podcasts\n</h2>\n\n<p><a href=\"https://www.linkedin.com/in/scooper-dev\">Stephen Cooper</a> and <a href=\"https://www.linkedin.com/in/mana-peirov-184229138/\">Mana Peirov</a> from the AG Grid team appeared on the <a href=\"https://twitter.com/angularpodcast/status/1552872210913566720\">Adventures in Angular podcast</a> discussing Testing and Charting.</p>\n\n<p>You can <a href=\"https://topenddevs.com/podcasts/adventures-in-angular/episodes/async-angular-testing-and-introducing-ag-charts-aia-352\">listen to the podcast here</a>.</p>\n\n",
      "category": "aggrid"
  },
  {
      "title": "Using Playwright to Test AG Grid React Apps",
      "creator": "Alan Richardson",
      "pubDate": "2022-07-22T12:37:00.000Z",
      "link": "https://dev.to/ag-grid/using-playwright-to-test-ag-grid-react-apps-30h8",
      "guid": "https://dev.to/ag-grid/using-playwright-to-test-ag-grid-react-apps-30h8",
      "description": "<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hiVnXs9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/blog-playwright-react-components-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hiVnXs9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/blog-playwright-react-components-tiny.png\" alt=\"Using Playwright to Test AG Grid React Apps\" width=\"688\" height=\"400\"></a></p>\n\n<p><em>This article contributed to the AG Grid blog by <a href=\"https://blog.pavey.dev/\">Cameron Pavey</a></em></p>\n\n<p><a href=\"https://playwright.dev\">Playwright</a> is a testing tool created and maintained by Microsoft geared primarily toward end-to-end (E2E) tests. It boasts several features that make it a compelling choice for teams considering different E2E tools, including a cross-language API that lets you write your tests in various languages (JavaScript, TypeScript, Python, .NET, and Java) and cross-platform support for all major browsers.</p>\n\n<p>Similar to <a href=\"https://www.cypress.io\">Cypress</a> and <a href=\"https://www.selenium.dev\">Selenium</a>, Playwright’s primary use case is E2E testing; however, recently, it has also gained experimental support for component testing. Component testing allows you to validate individual UI components’ functionality in isolation without invoking the whole application as you typically would in an E2E test.</p>\n\n<p>In this tutorial, you’ll learn more about the distinction between E2E testing and component testing before seeing how Playwright facilitates both kinds of tests. You’ll learn how to create a simple React application that utilizes <a href=\"https://www.ag-grid.com/\">AG Grid</a> and how to validate the functionality of that application at an E2E and component testing level using Playwright.</p>\n\n<h2>\n  \n  \n  What Are E2E Tests\n</h2>\n\n<p>E2E tests are one of the three tiers of testing described by the <a href=\"https://martinfowler.com/articles/practical-test-pyramid.html\">testing pyramid</a>. They are typically regarded as one of the slower and more expensive types of tests because they usually invoke the entire system and simulate user interactions with a fully composed system. This inevitably leads to longer-running tests (compared to unit tests and integration tests, which both reside closer to the base of the pyramid), with often fragile imperative instructions describing how the test runner should interact with the application. While this tutorial will primarily focus on Playwright, Cypress is also a very compelling option, and it recently released the <a href=\"https://docs.cypress.io/guides/component-testing/writing-your-first-component-test\">beta of their component testing solution</a>, similar to Playwright.</p>\n\n<p>One of the big differences between Playwright and Cypress is the philosophies that they follow. Playwright endorses the use of the <a href=\"https://playwright.dev/docs/test-pom\">Page Object Model (POM)</a> pattern. However, Cypress suggests that <a href=\"https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/\">code being reused through custom commands</a> is an effective alternative, although the POM pattern is still achievable in Cypress if you prefer it. AG Grid has a blog post about using a <a href=\"https://blog.ag-grid.com/cypress-plugin-for-ag-grid/\">Cypress plug-in for testing AG Grid applications</a> that eloquently demonstrates the virtues of Cypress’s custom command functionality. Either way, both tools are effective for E2E testing, but what about component testing?</p>\n\n<h3>\n  \n  \n  Component Testing Challenges\n</h3>\n\n<p>Component testing can be tricky because, depending on your interpretation, there are various places it could fit in the testing pyramid. You can treat it like an E2E test, as it typically deals with the same UI components, but this approach has some drawbacks. Using the full E2E setup for component testing will be slower than potential alternatives because it still needs to invoke the entire application and its dependencies. This also poses a challenge if you are dealing with a component library with no distinct application to invoke. In this case, you need to make a simple application that mounts your components to test this. This increases the amount of setup and the amount of overhead involved in running these tests, and makes them generally less appealing when viewed from a cost/benefit perspective.</p>\n\n<p>Another approach is to treat them more like unit tests. You can achieve this by using tools like <a href=\"https://jestjs.io/\">Jest</a> as your test runner and <a href=\"https://testing-library.com/docs/react-testing-library/intro/\">Testing Library</a>, which is a testing utility library that exposes some functions to help you test your components in isolation. This is typically a good approach in terms of effort, maintainability, and general developer experience. However, there are still some drawbacks, the most notable of which is that the tests don’t run in a real browser. Instead, the tests use <a href=\"https://github.com/jsdom/jsdom\">JSDom</a> in most cases. This is where the component testing functionality of Playwright comes in.</p>\n\n<p>With Playwright, you can run your component tests in real browsers, using the same sort of tests that you would write for your E2E tests but without the drawbacks of using the full E2E setup, with additional overhead and unrelated application code being included.</p>\n\n<h2>\n  \n  \n  E2E and Component Testing with Playwright\n</h2>\n\n<p>Before getting started, there are a few things you will need:</p>\n\n<ul>\n<li>A recent version of <a href=\"https://nodejs.org/en/download/\">Node.js</a> (which comes with npm). This tutorial uses v14.19.3.</li>\n<li>A code editor of your choice. <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> is a good choice if you don’t already have a code editor you prefer.</li>\n</ul>\n\n<p>If you wish to see the completed code for the tutorial, you can find it in <a href=\"https://github.com/cpave3/ag-grid-playwright\">this public GitHub repo</a>. Otherwise, if you’d prefer to build it yourself, or see how it’s done, keep following along.</p>\n\n<p>Once you have your prerequisites, the first thing you need to do is create a new project. You can use <a href=\"https://vitejs.dev/\">Vite</a> for this tutorial, as it is fast, minimal, and easy to get started with, but other app starters, like <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a> and <a href=\"https://nextjs.org/\">Next.js</a>, should also work. To create your new project, open a terminal and run the following commands:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm create vite@latest ag-grid-playwright --template react\ncd ag-grid-playwright\nnpm install\n\n</code></pre>\n\n</div>\n\n\n\n<p>This will create a directory named <code>ag-grid-playwright/</code> with a minimalist project inside it before navigating into the directory and installing all the current node dependencies. Next, you can install Playwright with the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm init playwright@latest\n\n</code></pre>\n\n</div>\n\n\n\n<p>The installer will ask you questions like whether you want to use JavaScript or TypeScript, where you want to store the test files, and whether you want to create a GitHub Action. If you are following along, select <strong>JavaScript</strong> when prompted and then accept the default answers for the other questions, as these will work for this tutorial.</p>\n\n<p>Once Playwright is installed, you can test that it works as expected. By default, it comes with an example test spec that runs twenty-five sample assertions in each of the three major browsers: Chrome, Firefox, and WebKit. To run this spec file, run the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npx playwright test\n\n</code></pre>\n\n</div>\n\n\n\n<p>If all is well so far, you should see an output like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FSHGJ-z_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/playwright-reports-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FSHGJ-z_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/playwright-reports-tiny.png\" alt=\"Using Playwright to Test AG Grid React Apps\" width=\"880\" height=\"442\"></a></p>\n\n<p>To simplify the output later when you add your tests, you can delete the example located at <code>tests/example.spec.js</code>.</p>\n\n<p>Now that you have Playwright set up, you can install a couple more dependencies that you will need to build the actual application, AG Grid. To do this, use the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install ag-grid-react ag-grid-community\n\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Creating the Application\n</h3>\n\n<p>With the dependencies installed, you need to create the components you will use in this application. So that there is a level of contrived complexity in the application, you will create two main components: the <code>DataGrid</code> and the <code>CustomRenderer</code> for one of the columns in your grid. You can do this by running the following commands:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>mkdir src/components\ntouch src/components/DataGrid.jsx\ntouch src/components/CustomRenderer.jsx\n\n</code></pre>\n\n</div>\n\n\n\n<p>This will create the directory and files for the components you need. Next, open the <code>CustomRenderer.jsx</code> file in your editor and paste in the following content:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export const CustomRenderer = (props) =&gt; {\n  return &lt;span&gt;{`$${props.value.toLocaleString()}`}&lt;/span&gt;;\n};\n\n</code></pre>\n\n</div>\n\n\n\n<p>This simple component will be responsible for rendering the integer values in your data, formatted as monetary values. After this, open the <code>DataGrid.jsx</code> file and paste in the following content:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React, { useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport { CustomRenderer } from \"./CustomRenderer\";\n\nexport const DataGrid = () =&gt; {\n  const [rowData] = useState([\n    { make: \"Toyota\", model: \"Celica\", price: 35000 },\n    { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n    { make: \"Porsche\", model: \"Boxster\", price: 72000 },\n  ]);\n\n  const [columnDefs] = useState([\n    { field: \"make\" },\n    { field: \"model\" },\n    { field: \"price\", cellRenderer: CustomRenderer },\n  ]);\n\n  return (\n    &lt;div className=\"ag-theme-alpine\" style={{ height: 400, width: 600 }}&gt;\n    &lt;AgGridReact rowData={rowData} columnDefs={columnDefs}&gt;&lt;/AgGridReact&gt;\n    &lt;/div&gt;\n  );\n};\n\n</code></pre>\n\n</div>\n\n\n\n<p>This code is a slightly modified version of the <a href=\"https://www.ag-grid.com/react-data-grid/getting-started/\">example</a> from the AG Grid documentation. The modification to this code is simply to use the <code>CustomRenderer</code> component for the <code>price</code> column, which will display the value as a formatted monetary value rather than just a number. You will need to change one more file to ensure the application renders correctly. Open <code>src/App.jsx</code> and replace its content with the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { DataGrid } from \"./components/DataGrid\";\n\nfunction App() {\n  return &lt;DataGrid /&gt;;\n}\n\nexport default App;\n\n</code></pre>\n\n</div>\n\n\n\n<p>Before proceeding to the E2E test, you should verify that the app is working as expected. To do this, from your terminal, run <code>npm run dev</code>, which will tell Vite to start a dev server, allowing you to access your application, typically located at <a href=\"http://localhost:3000\">http://localhost:3000</a> if the port is free. If it needs to run on a different port for whatever reason, the terminal output will tell you where it is running when you execute the command. When you visit that URL, you should see something like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O63TIxoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/sample-application-for-playwright-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O63TIxoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/sample-application-for-playwright-tiny.png\" alt=\"Using Playwright to Test AG Grid React Apps\" width=\"880\" height=\"641\"></a></p>\n\n<p>Although the application is very simple, it gives you a few things that you can test with both E2E and component tests and, as such, serves as an excellent example for this kind of tutorial.</p>\n\n<h3>\n  \n  \n  The E2E Test\n</h3>\n\n<p>For your E2E test, you want to ensure that the application works as expected. In the case of this simple application, that essentially amounts to showing the correct data. To do this, make a new file located at <code>tests/app.spec.jsx</code> and give it the following content:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { test, expect } from \"@playwright/test\";\n\ntest(\"Check that all expected data is present\", async ({ page }) =&gt; {\n  await page.goto(\"http://localhost:3000\");\n\n  // Verify that the title is correct\n  await expect(page).toHaveTitle(\"Vite App\");\n\n  // Specify the data that we expect to be present\n  const expectedData = [\n    [\"Toyota\", \"Celica\", \"$35,000\"],\n    [\"Ford\", \"Mondeo\", \"$32,000\"],\n    [\"Porsche\", \"Boxster\", \"$72,000\"],\n  ];\n\n  // Verify that the data is correct\n  for (let index = 0; index &lt; expectedData.length; index++) {\n    const row = await page.locator(\"role=row\").nth(index + 1);\n    const [make, model, price] = expectedData[index];\n    await expect(row).toContainText([make, model, price]);\n  }\n});\n\n</code></pre>\n\n</div>\n\n\n\n<p>This test will instruct Playwright to navigate to your application, hosted by Vite’s dev server. Check that the page title is correct and that the three expected rows of data are present and correct. You can add a script to your <code>package.json</code> file to help run your E2E tests. Open your <code>package.json</code> file and add the following line to your <code>scripts</code> object:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>…\n\"test\": \"playwright test\"\n…\n\n</code></pre>\n\n</div>\n\n\n\n<p>Now, ensure that your Vite dev server is still running so that your application is available on port 3000, and then in a new terminal window (navigate back to the project directory if you need to), run the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm run test\n\n</code></pre>\n\n</div>\n\n\n\n<p>You should see an output like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--m8QebSxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/run-playwright-tests-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--m8QebSxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/run-playwright-tests-tiny.png\" alt=\"Using Playwright to Test AG Grid React Apps\" width=\"880\" height=\"442\"></a></p>\n\n<p>Even though you only have one test at the moment, Playwright is configured to run three different projects, one with each of the three major browsers. You can see this configuration in <code>playwright.config.js</code>.</p>\n\n<p>This E2E test requires your application to be running and will load your entire application for each test. That isn’t a problem for a small application like this one. With larger, more complex real-world applications, however, it isn’t ideal to have that overhead if you aren’t testing the whole application.</p>\n\n<p>Next, you’ll see how you can use Playwright to create some simple component tests for your <code>CustomRenderer</code> and <code>DataGrid</code> components.</p>\n\n<h3>\n  \n  \n  The Component Tests\n</h3>\n\n<p>Getting started with Playwright component testing is similar to the initial setup for Playwright E2E testing. However, you should note that at the time of writing this, component testing support in Playwright is still regarded as experimental, so it’s possible things will change in the future. If you find that these instructions do not work as expected, please refer to the <a href=\"https://playwright.dev/docs/test-components\">official documentation</a> for further guidance.</p>\n\n<p>To get started, run the following command from the root of your project directory:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm init playwright@latest --ct\n\n</code></pre>\n\n</div>\n\n\n\n<p>This will prompt you with similar questions to the initial setup, but if you are following along, answer with “JavaScript” and “React” when prompted for your language and framework, respectively. When this command finishes, you should have a new file called <code>playwright-ct.config.js</code>. Open this file and edit the <code>testDir</code> property as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>…\ntestDir: ‘./src’,\n…\n\n</code></pre>\n\n</div>\n\n\n\n<p>This change is necessary because the default value of <code>'./'</code> will include your E2E tests, which you don’t necessarily want to run alongside your component tests in the same command. After making this change, you can create your two component tests. For the first one, create a file at <code>src/components/CustomRenderer.spec.jsx</code> and give it the following content:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { test, expect } from \"@playwright/experimental-ct-react\";\nimport { CustomRenderer } from \"./CustomRenderer\";\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest(\"formats value correctly\", async ({ mount }) =&gt; {\n  const component = await mount(&lt;CustomRenderer value={10000} /&gt;);\n  await expect(component).toContainText(\"$10,000\");\n});\n\n</code></pre>\n\n</div>\n\n\n\n<p>This test will ensure that the <code>CustomRenderer</code> parses numeric values into monetary values correctly. Next, create a file at <code>src/components/DataGrid.spec.jsx</code> and give it the following content:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { test, expect } from \"@playwright/experimental-ct-react\";\nimport { DataGrid } from \"./DataGrid\";\n\ntest.use({ viewport: { width: 500, height: 500 } });\n\ntest(\"contains the expected data\", async ({ mount }) =&gt; {\n  const component = await mount(&lt;DataGrid /&gt;);\n\n  const expectedData = [\n    [\"Toyota\", \"Celica\", \"$35,000\"],\n    [\"Ford\", \"Mondeo\", \"$32,000\"],\n    [\"Porsche\", \"Boxster\", \"$72,000\"],\n  ];\n\n  // Verify that the data is correct\n  for (let index = 0; index &lt; expectedData.length; index++) {\n    const row = await component.locator(\"role=row\").nth(index + 1);\n    const [make, model, price] = expectedData[index];\n    await expect(row).toContainText([make, model, price]);\n  }\n});\n\n</code></pre>\n\n</div>\n\n\n\n<p>You will notice that this test borrows heavily from the E2E test in terms of logic. It is, after all, performing very similar assertions due to the limited scope of the application. The key difference here, however, is that it will not instantiate your whole application, nor does it require your Vite dev server to be running. With both of these tests created, you can run the following command to execute them:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm run test-ct\n\n</code></pre>\n\n</div>\n\n\n\n<p>From this command, you should see similar output to your E2E test, except it will be <code>6</code> now instead of <code>3</code> (because you have two tests and three browsers):</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fPQ5_tv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/component-test-output-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fPQ5_tv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/component-test-output-tiny.png\" alt=\"Using Playwright to Test AG Grid React Apps\" width=\"880\" height=\"442\"></a></p>\n\n<p>Being able to test components in isolation, away from the rest of your application, is important because not only will the tests run faster than heavier E2E tests but, more importantly, the tests will not be affected by external factors and unrelated code. Performing your component tests with the same tools as your E2E tests (as opposed to using Jest and Testing Library) is a huge advantage. It opens the door for productivity boosts, such as sharing test helpers between E2E and component tests, allowing you to share abstractions and utilities between these two testing domains without the drawbacks that traditionally come with fully merging them.</p>\n\n<h2>\n  \n  \n  Summary of Github Steps\n</h2>\n\n<p>You can find the code for this tutorial in this public <a href=\"https://github.com/cpave3/ag-grid-playwright\">GitHub repo</a>.</p>\n\n<p>First, clone or download and unzip the repo code, then install the dependencies:</p>\n\n<p><code>npm install</code></p>\n\n<p>Second, install Playwright and browsers:</p>\n\n<p><code>npx playwright install</code></p>\n\n<p>To run the component tests:</p>\n\n<p><code>npm run test-ct</code></p>\n\n<p>To run the end to end tests we need to run the dev server from one console with <code>npm run dev</code> to start the app running on <code>localhost</code>. Then run the end to end tests with:</p>\n\n<p><code>npm run test</code></p>\n\n<p>After each test run you can use <code>npx playwright show-report</code> to see the execution report.</p>\n\n<h2>\n  \n  \n  Wrapping Up\n</h2>\n\n<p>In this tutorial, you learned how to create a simple application with React, Vite, and <a href=\"https://www.ag-grid.com/react-data-grid\">AG Grid</a>, and then test that application at an E2E and component level using Playwright. You’ve also learned about the differences between E2E and component testing, as well as some tools that can help you create those kinds of tests, like Playwright, Cypress, Jest, and Testing Library.</p>\n\n<p>If you want to learn more about Playwright, the <a href=\"https://playwright.dev/docs/intro\">official documentation</a> is a great place to get started.</p>\n\n",
      "category": "testing"
  },
  {
      "title": "Using AG Grid in Electron Applications",
      "creator": "Alan Richardson",
      "pubDate": "2022-07-21T14:06:03.000Z",
      "link": "https://dev.to/ag-grid/using-ag-grid-in-electron-applications-d7e",
      "guid": "https://dev.to/ag-grid/using-ag-grid-in-electron-applications-d7e",
      "description": "<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R5Mu0WkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/aggrid-electron-app-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R5Mu0WkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/aggrid-electron-app-tiny.png\" alt=\"Using AG Grid in Electron Applications\" width=\"688\" height=\"400\"></a></p>\n\n<p><em>This post contributed to the AG Grid blog by <a href=\"https://areknawo.com/\">Arek Nawo</a></em></p>\n\n<p><a href=\"https://www.electronjs.org\">Electron</a> is a cross-platform framework for building native desktop applications with web technologies. It’s built on top of Node.js and the <a href=\"https://www.chromium.org/chromium-projects/\">Chromium</a> browser, allowing you to use all of the latest features and improvements from the browser and JavaScript language.</p>\n\n<p>Electron enables you to create the best user experience while taking care of all the complex parts of making a native app. With Electron, you can reuse both your knowledge and codebase across the web and all desktop platforms. If you already know how to develop frontend web apps and Node.js backends, you’ll feel right at home with Electron as it basically combines those two into a single app.</p>\n\n<p>In this article, you’ll learn how to integrate <a href=\"https://www.ag-grid.com/javascript-data-grid/\">AG Grid</a>—an advanced and performant JavaScript grid library—into your Electron app. You’ll create a simple to-do app with native functionality to save and restore its state from a JSON file.</p>\n\n<p>You can follow along with <a href=\"https://github.com/areknawo/Using-AG-Grid-in-Electron-Applications\">this GitHub repo</a>.</p>\n\n<h2>\n  \n  \n  How Does Electron Work?\n</h2>\n\n<p>A basic Electron app consists of two processes. <a href=\"https://www.electronjs.org/docs/latest/tutorial/process-model#the-main-process\">The main process</a> acts as an entry point for the app, with access to Node.js APIs and modules (including native ones). It also controls the app’s lifecycle and manages its windows using Electron-provided APIs.</p>\n\n<p>So while the main process is like your web app’s backend, <a href=\"https://www.electronjs.org/docs/latest/tutorial/process-model#the-renderer-process\">the renderer process</a> is more like its frontend. It’s responsible for rendering the app’s UI and runs in every opened window. Thus, it should follow web standards (such as <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/HTML5\">HTML5</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\">CSS3</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources\">ECMAScript</a>) and use browser Web APIs. No Node-specific code is allowed.</p>\n\n<p>To communicate between processes (e.g., to handle data transfer or invoke native functionality from the UI), you can use <a href=\"https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scriptshttps://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\">preload scripts</a> and <a href=\"https://www.electronjs.org/docs/latest/tutorial/ipc\">inter-process communication</a> (IPC). Preload scripts run in the renderer process before the main script and have access to the Node.js API. You can use them with the Electron’s <code>contextBridge</code> module to safely expose privileged APIs to the renderer process. Most notably, you can expose helpers leveraging the <code>ipcRenderer</code> module to communicate with the main process.</p>\n\n<h2>\n  \n  \n  Using AG Grid with Electron\n</h2>\n\n<p>A good way to get started with Electron is with <a href=\"https://www.electronforge.io/\">Electron Forge</a>—“a complete tool for creating, publishing, and installing modern Electron applications.” Electron Forge has everything you need to work on your Electron app, including a <a href=\"https://www.electronforge.io/templates/webpack-template\">Webpack-powered template</a>.</p>\n\n<h3>\n  \n  \n  Setting Up the Project\n</h3>\n\n<p>To initiate a new project with Electron Forge, ensure you have git and Node.js v12.13.0 or newer installed. Then, run the following commands to create the project, install additional dependencies, and start the development server:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npx create-electron-app@latest project --template=webpack\ncd project\nnpm install ag-grid-community\nnpm run start\n\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Managing the App’s Window\n</h4>\n\n<p>By default, the template includes files for main and renderer processes. Inside the <strong>src/main.js</strong> file, you’ll see the starting point of your app. Take a closer look at the <code>createWindow()</code> function and event listeners below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const { app, BrowserWindow } = require(\"electron\");\n// ...\n\nconst createWindow = () =&gt; {\n  const mainWindow = new BrowserWindow();\n\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\n  mainWindow.webContents.openDevTools();\n};\n\napp.on(\"ready\", createWindow);\napp.on(\"window-all-closed\", () =&gt; {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\napp.on(\"activate\", () =&gt; {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n</code></pre>\n\n</div>\n\n\n\n<p>The <code>app</code> module controls your app’s event lifecycle. When the app is ready, it creates a new window by calling <code>createWindow()</code>, which in turn creates a new instance of <code>BrowserWindow</code>. Using the <code>loadURL()</code> method, the window loads the content served by Webpack’s development server. It also opens dev tools for easier debugging using the <code>webContents.openDevTools()</code> method.</p>\n\n<p>The other event listeners handle macOS-specific edge cases, like keeping the app open without any windows (<code>window-all-closed</code>) or opening a new window when activated from the dock (<code>activate</code>).</p>\n\n<h4>\n  \n  \n  Adding Preload Script\n</h4>\n\n<p>To allow native API access from the renderer process, you’ll have to expose some functions in the preload script. Although the template doesn’t include it by default, adding it yourself is easy.</p>\n\n<p>Create a new <strong>src/preload.js</strong> file and edit the <code>config.forge.plugins</code> field in <code>package.json</code> to inform Electron Forge about the preload script:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{\n  /* ... */\n  \"config\": {\n    \"forge\": {\n      \"packagerConfig\": {},\n      /* ... */\n      \"plugins\": [\n        [\n          \"@electron-forge/plugin-webpack\",\n          {\n            \"mainConfig\": \"./webpack.main.config.js\",\n            \"renderer\": {\n              \"config\": \"./webpack.renderer.config.js\",\n              \"entryPoints\": [\n                {\n                  \"html\": \"./src/index.html\",\n                  \"js\": \"./src/renderer.js\",\n                  \"preload\": {\n                    \"js\": \"./src/preload.js\"\n                  },\n                  \"name\": \"main_window\"\n                }\n              ]\n            }\n          }\n        ]\n      ]\n    }\n  }\n  /* ... */\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>To initialize the script, specify it when creating a <code>BrowserWindow</code> in the <strong>src/main.js</strong> file using the Webpack-provided global variable:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nconst createWindow = () =&gt; {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,\n    },\n  });\n\n  // ...\n};\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Building the Renderer Process UI\n</h3>\n\n<p>With essential window management ready, you can start working on the renderer process. You’ll use AG Grid to create a simple to-do list with the ability to add, remove, and mark items as complete.</p>\n\n<p>Developing a renderer process is very similar to creating a frontend web application. You can use all the frontend frameworks and APIs available in the browser environment. In this tutorial, you’ll use plain HTML, JS, and CSS to keep things simple.</p>\n\n<p>Start by creating your UI’s structure in the <strong>src/index.html</strong> file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;AG Grid + Electron&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;h1&gt;Electron TO-DO&lt;/h1&gt;\n      &lt;div class=\"btn-container\"&gt;\n        &lt;button id=\"save-btn\" class=\"btn\"&gt;Save&lt;/button&gt;\n        &lt;button id=\"restore-btn\" class=\"btn\"&gt;Restore&lt;/button&gt;\n        &lt;button id=\"add-btn\" class=\"btn add-btn\"&gt;Add&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;div class=\"divider\"&gt;&lt;/div&gt;\n      &lt;div id=\"grid\" class=\"ag-theme-alpine\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>Then, add the necessary styling in <strong>src/index.css</strong> :<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>html,\nbody {\n  height: 100%;\n  margin: 0;\n}\n#grid {\n  width: 100%;\n  flex: 1;\n}\n.container {\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: calc(100% - 2rem);\n  padding: 1rem;\n  width: 30rem;\n}\n.btn-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  gap: 0.5rem;\n  width: 100%;\n}\n.divider {\n  margin: 0.5rem 0;\n  background: #e6e6e6;\n  height: 0.125rem;\n}\n.checkbox {\n  height: 100%;\n  margin: 0;\n  width: 1.25rem;\n}\n.btn {\n  flex: 1;\n  padding: 0.5rem;\n  background: #6b7280;\n  border: none;\n  color: #fff;\n  font-size: 1rem;\n}\n.btn:hover {\n  background: #9ca3af;\n  cursor: pointer;\n}\n.add-btn {\n  padding: 0.5rem;\n  background: #f97316;\n  border: none;\n}\n.add-btn:hover {\n  background: #fb923c;\n  cursor: pointer;\n}\n.remove-btn {\n  display: inline-flex;\n  max-height: 1.25rem;\n  max-width: 1.25rem;\n  font-size: 1.25rem;\n  justify-content: center;\n  align-items: center;\n  background-color: #ef4444;\n}\n.remove-btn:hover {\n  background-color: #f87171;\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>With this setup, you can now move to the <strong>src/renderer.js</strong> file to initialize the grid:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"./index.css\";\nimport { Grid } from \"ag-grid-community\";\n\nlet rowData = [];\n\nconst columnDefs = [\n  // ...\n];\nconst gridOptions = {\n  columnDefs,\n  rowData,\n};\nconst saveBtn = document.getElementById(\"save-btn\");\nconst restoreBtn = document.getElementById(\"restore-btn\");\nconst addBtn = document.getElementById(\"add-btn\");\nconst addTodo = () =&gt; {\n  // ...\n};\nconst removeTodo = (rowIndex) =&gt; {\n  // ...\n};\nconst saveToFile = () =&gt; {\n  // ...\n};\nconst restoreFromFile = async () =&gt; {\n  // ...\n};\nconst setupGrid = () =&gt; {\n  const gridDiv = document.getElementById(\"grid\");\n\n  new Grid(gridDiv, gridOptions);\n  addBtn.addEventListener(\"click\", addTodo);\n  saveBtn.addEventListener(\"click\", saveToFile);\n  restoreBtn.addEventListener(\"click\", restoreFromFile);\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", setupGrid);\n\n</code></pre>\n\n</div>\n\n\n\n<p>All setup, including creating a <code>Grid</code> instance and adding event handlers, happens after the DOM is loaded. The grid is created using the provided configuration, defining its columns and input data:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nlet rowData = [];\n\nconst columnDefs = [\n  { field: \"task\", editable: true, flex: 1 },\n  {\n    field: \"completed\",\n    width: 120,\n    cellRenderer(params) {\n      const input = document.createElement(\"input\");\n\n      input.type = \"checkbox\";\n      input.checked = params.value;\n      input.classList.add(\"checkbox\");\n      input.addEventListener(\"change\", (event) =&gt; {\n        params.setValue(input.checked);\n      });\n\n      return input;\n    },\n  },\n  {\n    field: \"remove\",\n    width: 100,\n    cellRenderer(params) {\n      const button = document.createElement(\"button\");\n\n      button.textContent = \"✕\";\n      button.classList.add(\"btn\", \"remove-btn\");\n      button.addEventListener(\"click\", () =&gt; removeTodo(params.rowIndex));\n\n      return button;\n    },\n  },\n];\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>The columns are defined by certain parameters such as <code>field</code> name, <code>width</code>, or custom <code>cellRenderer</code> in case you want to display the data differently. <code>editable</code> enables built-in editing support, allowing the user to change the task’s name. At the same time, <code>flex</code> is an alternative to <code>width</code>, indicating that the column should fill the remaining space.</p>\n\n<p>For <em>“completed”</em> and <em>“remove”</em> columns, custom cell renderers render a checkbox and button to, respectively, change the status of the task or remove it from the list entirely. The actual change to the grid’s data is done with <code>params.setValue()</code> and a separate <code>removeTodo()</code> function.</p>\n\n<p>Both <code>addTodo()</code> and <code>removeTodo()</code> operate using the <code>gridOptions.api</code> object. After being provided to the grid, <code>gridOptions</code> gets the <code>api</code> property to allow control of the grid:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nconst addTodo = () =&gt; {\n  rowData = [...rowData, { task: \"New Task\", completed: false }];\n  gridOptions.api.setRowData(rowData);\n};\nconst removeTodo = (rowIndex) =&gt; {\n  rowData = rowData.filter((value, index) =&gt; {\n    return index !== rowIndex;\n  });\n  gridOptions.api.setRowData(rowData);\n};\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>Values from <code>rowData</code> items are also bound to the grid, meaning that if the user changes the completion status or the task’s name, the new value is reflected in one of the <code>rowData</code> items.</p>\n\n<p>With all these changes, the app’s UI is now fully functional and looks like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IYAPZJAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/electron-todo-app-with-ag-grid-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IYAPZJAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/electron-todo-app-with-ag-grid-tiny.png\" alt=\"Using AG Grid in Electron Applications\" width=\"880\" height=\"629\"></a></p>\n\n<p>All that’s left is to implement save and restore functionality. For that, you’ll have to return to the main process.</p>\n\n<h3>\n  \n  \n  Adding Native Functionality\n</h3>\n\n<p>Inside the <strong>src/main.js</strong> file, create a new function, <code>handleCommunication()</code>, for handling IPC implementation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const { app, BrowserWindow, ipcMain, dialog } = require(\"electron\");\n// ...\n\nconst handleCommunication = () =&gt; {\n  ipcMain.removeHandler(\"save-to-file\");\n  ipcMain.removeHandler(\"restore-from-file\");\n  ipcMain.handle(\"save-to-file\", async (event, data) =&gt; {\n    try {\n      const { canceled, filePath } = await dialog.showSaveDialog({\n        defaultPath: \"todo.json\",\n      });\n\n      if (!canceled) {\n        await fs.writeFile(filePath, data, \"utf8\");\n\n        return { success: true };\n      }\n      return {\n        canceled,\n      };\n    } catch (error) {\n      return { error };\n    }\n  });\n  ipcMain.handle(\"restore-from-file\", async () =&gt; {\n    try {\n      const { canceled, filePaths } = await dialog.showOpenDialog({\n        properties: [\"openFile\"],\n        filters: [\n          {\n            name: \"json\",\n            extensions: [\"json\"],\n          },\n        ],\n      });\n\n      if (!canceled) {\n        const [filePath] = filePaths;\n        const data = await fs.readFile(filePath, \"utf8\");\n\n        return { success: true, data };\n      } else {\n        return { canceled };\n      }\n    } catch (error) {\n      return { error };\n    }\n  });\n};\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>First, using <code>ipcMain.removeHandler()</code>, ensure that no existing handlers are attached to the used channels in case the window was reactivated (macOS-specific). The <code>ipcMain.handle()</code> method allows you to handle specific events and respond with data by simply returning a value from the handler.</p>\n\n<p>For this app, the channels used are <code>”save-to-file”</code> and <code>”restore-from-file”</code>. Their handlers use the <code>dialog</code> module to bring up the system’s native open or save dialogues. The resulting paths are then provided to Node.js’s built-in <code>fs</code> module to read from or write to the provided file.</p>\n\n<p><code>handleCommunication()</code> should be called from the <code>createWindow()</code> function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nconst createWindow = () =&gt; {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,\n    },\n  });\n\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\n  mainWindow.webContents.openDevTools();\n  handleCommunication();\n};\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>To be able to send an IPC message from the renderer process, you’ll have to use the preload script and the <code>contextBridge</code> module:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// src/preload.js\nconst { contextBridge, ipcRenderer } = require(\"electron\");\n\ncontextBridge.exposeInMainWorld(\"electronAPI\", {\n  saveToFile(data) {\n    return ipcRenderer.invoke(\"save-to-file\", data);\n  },\n  restoreFromFile() {\n    return ipcRenderer.invoke(\"restore-from-file\");\n  },\n});\n\n</code></pre>\n\n</div>\n\n\n\n<p><code>contextBridge.exposeInMainWorld()</code> safely exposes the provided API to the renderer process. Keep in mind that, in preload script, you’ve got access to privileged APIs, which, for security reasons, should be freely available from the frontend of your Electron app.</p>\n\n<p>The exposed methods use the <code>ipcRenderer</code> module to send messages to the <code>ipcMain</code> listener on the other process. In the case of the <code>”save-to-file”</code> channel, additional data in the form of a JSON string to save is provided.</p>\n\n<p>With the bridge ready, you can return to the renderer process and finish the integration by adding proper handlers for the last two buttons:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nconst saveToFile = () =&gt; {\n  window.electronAPI.saveToFile(JSON.stringify(rowData));\n};\nconst restoreFromFile = async () =&gt; {\n  const result = await window.electronAPI.restoreFromFile();\n\n  if (result.success) {\n    rowData = JSON.parse(result.data);\n    gridOptions.api.setRowData(rowData);\n  }\n};\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>Each handler uses methods from the <code>electronAPI</code> object available on the <code>window</code>. In <code>saveToFile()</code>, the <code>rowData</code> is stringified and sent to the main process for writing it to the file. In the case of the restore operation, it first <code>await</code>s the file’s stringified content to then parse and assign it to the grid.</p>\n\n<p>Now your app can use the native file dialog to restore and save its state:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--71WkVQZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/todo-save-dialog-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--71WkVQZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/todo-save-dialog-tiny.png\" alt=\"Using AG Grid in Electron Applications\" width=\"880\" height=\"664\"></a></p>\n\n<p>The final app outputs a JSON file like the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>[{\"task\":\"Learn Electron\",\"completed\":true},{\"task\":\"Learn AG Grid\",\"completed\":false}]\n\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Now you know how to use AG Grid in an Electron app. You’ve learned about Electron processes—what they are and how they work. Finally, you established IPC to communicate between them to implement native functionality into your app.</p>\n\n<p>As you’ve seen, thanks to Electron, you can quickly transform your web app into an installable native desktop app with all the functionality that comes alongside it.</p>\n\n<p><a href=\"https://www.ag-grid.com/\">AG Grid</a> is a high-performance JavaScript table library that’s easy to set up. It integrates well with your favorite frameworks, like React, and works great with other parts of the JavaScript ecosystem, such as Electron. Check out <a href=\"https://www.ag-grid.com/react-data-grid/\">the official documentation</a> to learn more.</p>\n\n",
      "category": "tutorial"
  },
  {
      "title": "Using React-Bootstrap and AG Grid",
      "creator": "Alan Richardson",
      "pubDate": "2022-07-20T13:24:24.000Z",
      "link": "https://dev.to/ag-grid/using-react-bootstrap-and-ag-grid-13pk",
      "guid": "https://dev.to/ag-grid/using-react-bootstrap-and-ag-grid-13pk",
      "description": "<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1_LXAMAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/react-bootstrap-aggrid-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1_LXAMAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/react-bootstrap-aggrid-tiny.png\" alt=\"Using React-Bootstrap and AG Grid\" width=\"688\" height=\"400\"></a></p>\n\n<p><em>This post contributed to the AG Grid blog by <a href=\"https://areknawo.com/\">Arek Nawo</a></em></p>\n\n<p><a href=\"https://getbootstrap.com/\">Bootstrap</a> is one of the most popular CSS frameworks, so it’s no surprise that many libraries integrate it with the top JavaScript UI frameworks. One such library is React-Bootstrap.</p>\n\n<p><a href=\"https://react-bootstrap.github.io/\">React-Bootstrap</a> provides Bootstrap-powered React components with built-in reactivity. Every component is compatible with Bootstrap themes, optimized for accessibility, and can be controlled with React props. As one of the oldest React component libraries, React-Bootstrap is an excellent choice for building modern, responsive UI.</p>\n\n<p>In this article, you’ll learn how to integrate React-Bootstrap with <a href=\"https://www.ag-grid.com/\">AG Grid</a>, a batteries-included JavaScript grid with <a href=\"https://www.ag-grid.com/react-data-grid/\">first-party React integration</a>. You’ll see how easy it is to use both tools to build a compelling, user-friendly UI.</p>\n\n<p>You can find the complete code for this tutorial in <a href=\"https://github.com/areknawo/Using-React-Bootstrap-and-AG-Grid\">this GitHub repo</a>.</p>\n\n<h2>\n  \n  \n  AG Grid vs. React-Bootstrap Table\n</h2>\n\n<p>Before getting into the code, you should know the differences between AG Grid and React-Bootstrap’s built-in <code>Table</code> component.</p>\n\n<p>At its core, the <code>Table</code> component is a traditional HTML table with a header, body, rows, and cells. React-Bootstrap makes the often-tedious process of creating an HTML table easier, not only with React’s reactivity and JSX but also with a faster styling process. You can set basic styles, add a row hover effect or dark theme, and make the table responsive with just a few props. However, it’s still a simple table that’s meant for basic use cases.</p>\n\n<p>On the other hand, AG Grid is a full-blown, high-performance grid library. It provides you with everything you need to create an advanced, highly interactive grid-based UI, including filtering, data streaming, charting, and more. It’s your go-to solution if you need anything beyond a static table.</p>\n\n<h2>\n  \n  \n  Using AG Grid with React-Bootstrap\n</h2>\n\n<p>To get started, make sure you’ve got NPM v7 and Node.js v12.2.0 or newer installed. Then, run the following commands to scaffold your project using <a href=\"https://vitejs.dev/\">Vite</a>—a fast ES module-based bundler—and install necessary dependencies:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm create vite project --template react\ncd project\nnpm install\nnpm install bootstrap react-bootstrap ag-grid-community ag-grid-react\n\n</code></pre>\n\n</div>\n\n\n\n<p>The installed dependencies include the following:</p>\n\n<ul>\n<li>React-Bootstrap and “vanilla” Bootstrap for CSS styles loading</li>\n<li>AG Grid’s core “community” package and React Data Grid for rendering</li>\n</ul>\n\n<p>To start the development server, use <code>npm run dev</code>.</p>\n\n<h3>\n  \n  \n  Creating Card Container\n</h3>\n\n<p>To learn how to integrate React-Bootstrap with AG Grid, you’ll build a simple app listing countries to visit. You use React-Bootstrap to add functionality and visuals to the grid with images and buttons.</p>\n\n<p>Inside the <strong>src/App.jsx</strong> file, you initialize AG Grid together with React-Bootstrap. Start by creating a Bootstrap card for holding the grid:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import Card from \"react-bootstrap/Card\";\nimport Stack from \"react-bootstrap/Stack\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst App = () =&gt; {\n  return (\n    &lt;Card body className=\"h-100\"&gt;\n      &lt;Stack className=\"h-100\"&gt;\n        &lt;Card.Title&gt;Countries to visit&lt;/Card.Title&gt;\n        [Grid]\n      &lt;/Stack&gt;\n    &lt;/Card&gt;\n  );\n};\n\nexport default App;\n\n</code></pre>\n\n</div>\n\n\n\n<p>Using the <code>Card</code> and <code>Stack</code> components, you just built a full-height card with vertically stacked content. The grid will be placed just below the title.</p>\n\n<p>To center the card in the body, add some CSS in the <strong>src/index.css</strong> file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>html {\n  height: 100%;\n  width: 100%;\n}\nbody {\n  margin: 0;\n  padding: 1rem;\n  height: 100%;\n}\n#root {\n  margin: auto;\n  height: 100%;\n  width: 100%;\n  max-width: 48rem;\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>With these changes, the card should now look like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8dAmRX8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/bootstrap-card-container-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8dAmRX8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/bootstrap-card-container-tiny.png\" alt=\"Using React-Bootstrap and AG Grid\" width=\"880\" height=\"550\"></a></p>\n\n<h3>\n  \n  \n  Creating Basic AG Grid\n</h3>\n\n<p>To add the grid to the setup, you have to create a data source, which can be done using the <code>useState()</code> hook:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nimport { useState } from \"react\";\n// ...\n\nconst App = () =&gt; {\n  const [columnDefs] = useState([\n    {\n      headerName: \"Country\",\n      field: \"country\",\n    },\n    {\n      headerName: \"Image\",\n      field: \"image\",\n      flex: 1,\n    },\n    {\n      headerName: \"Visited\",\n      field: \"visited\",\n    },\n  ]);\n  const [rowData] = useState([\n    {\n      country: \"United Kingdom\",\n      image:\n        \"https://images.unsplash.com/photo-1486299267070-83823f5448dd?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2371&amp;q=80\",\n      visited: false,\n    },\n    {\n      country: \"United States\",\n      image:\n        \"https://images.unsplash.com/photo-1501594907352-04cda38ebc29?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2832&amp;q=80\",\n      visited: false,\n    },\n    {\n      country: \"India\",\n      visited: false,\n      image:\n        \"https://images.unsplash.com/photo-1524492412937-b28074a5d7da?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2371&amp;q=80\",\n    },\n    {\n      country: \"Canada\",\n      visited: false,\n      image:\n        \"https://images.unsplash.com/photo-1519832979-6fa011b87667?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2353&amp;q=80\",\n    },\n    {\n      country: \"Brazil\",\n      visited: false,\n      image:\n        \"https://images.unsplash.com/photo-1483729558449-99ef09a8c325?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2370&amp;q=80\",\n    },\n    {\n      country: \"Germany\",\n      visited: false,\n      image:\n        \"https://images.unsplash.com/photo-1554072675-66db59dba46f?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2373&amp;q=80\",\n    },\n    {\n      country: \"France\",\n      visited: false,\n      image:\n        \"https://images.unsplash.com/photo-1431274172761-fca41d930114?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2370&amp;q=80\",\n    },\n  ]);\n\n  // ...\n};\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>Each data row contains the name of the country, a related <a href=\"https://unsplash.com/\">Unsplash</a> image URL, and a Boolean indicating whether it was already visited. In addition, <code>columnDefs</code> define how the grid’s columns should be structured—e.g., their headers and width. In this case, all columns are displayed as text, with the image column taking the remaining horizontal space with <code>flex: 1</code>.</p>\n\n<p>To display the grid, use the <code>AgGridReact</code> component passing the row data, column definition, and any additional properties—<code>rowHeight</code> in pixels in this case—as props:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\n// ...\n\nconst App = () =&gt; {\n  // ...\n  return (\n    &lt;Card body className=\"h-100\"&gt;\n      &lt;Stack className=\"h-100 ag-theme-material\"&gt;\n        &lt;Card.Title&gt;Countries to visit&lt;/Card.Title&gt;\n        &lt;AgGridReact\n          columnDefs={columnDefs}\n          rowData={rowData}\n          rowHeight={200}\n        &gt;&lt;/AgGridReact&gt;\n      &lt;/Stack&gt;\n    &lt;/Card&gt;\n  );\n};\n\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>The grid also comes with CSS of its own, which you also have to import. The <code>ag-theme-material</code> class on the grid’s wrapper indicates what theme to use.</p>\n\n<p>The grid is now ready, but it displays all columns as text:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QWmkFEK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/basic-ag-grid-setup-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QWmkFEK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/basic-ag-grid-setup-tiny.png\" alt=\"Using React-Bootstrap and AG Grid\" width=\"880\" height=\"550\"></a></p>\n\n<p>Let’s use React-Bootstrap and replace URLs with images.</p>\n\n<h3>\n  \n  \n  Displaying Images\n</h3>\n\n<p>To display images in the grid, you’ll have to create a new component to be used as a cell renderer.</p>\n\n<p>Create a new file at <strong>src/ImageRenderer.jsx</strong> with the following content:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import Image from \"react-bootstrap/Image\";\nimport Stack from \"react-bootstrap/Stack\";\n\nconst ImageRenderer = (props) =&gt; {\n  return (\n    &lt;Stack direction=\"horizontal\" className=\"h-100\"&gt;\n      &lt;Image rounded src={props.getValue()} className=\"h-auto w-100\" /&gt;\n    &lt;/Stack&gt;\n  );\n};\n\nexport default ImageRenderer;\n\n</code></pre>\n\n</div>\n\n\n\n<p>Cell-renderer components receive data about the grid and current cell as props. You can use <code>props.getValue()</code> to get the cell’s current value, an image URL in this example. This value is then provided to React-Bootstrap’s <code>Image</code> component, along with other props. Additional Bootstrap class names and horizontally aligned <code>Stack</code> assure centered positioning and grid-adjusted sizing of the image.</p>\n\n<p>To use <code>ImageRenderer</code> in the grid, return to <strong>src/App.jsx</strong> and set it as a cell renderer for the image column:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nimport ImageRenderer from \"./ImageRenderer\";\n// ...\n\nconst App = () =&gt; {\n  const [columnDefs] = useState([\n    {\n      headerName: \"Country\",\n      field: \"country\",\n    },\n    {\n      headerName: \"Image\",\n      field: \"image\",\n      flex: 1,\n      // Set ImageRenderer component as cell renderer\n      cellRenderer: ImageRenderer,\n    },\n    {\n      headerName: \"Visited\",\n      field: \"visited\",\n    },\n  ]);\n  // ...\n};\n\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>With these improvements, the grid already looks a lot better:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uNHVvNfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/ag-grid-with-images-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uNHVvNfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/ag-grid-with-images-tiny.png\" alt=\"Using React-Bootstrap and AG Grid\" width=\"880\" height=\"550\"></a></p>\n\n<h3>\n  \n  \n  Adding Toggle Buttons\n</h3>\n\n<p>Besides seeing images, the user should be able to mark countries as visited. Currently, the visited column is empty as it contains only Boolean <code>false</code> values. To show a toggle button instead, create a new cell renderer at <strong>src/VisitedRenderer.jsx</strong> :<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import ToggleButton from \"react-bootstrap/ToggleButton\";\n\nconst VisitedRenderer = (props) =&gt; {\n  return (\n    &lt;ToggleButton\n      size=\"sm\"\n      id={`visited-${props.rowIndex}`}\n      type=\"checkbox\"\n      variant={props.getValue() ? \"outline-primary\" : \"outline-secondary\"}\n      checked={props.getValue()}\n      value=\"1\"\n      onChange={(e) =&gt; {\n        props.setValue(e.currentTarget.checked);\n      }}\n    &gt;\n      {props.getValue() ? \"YES\" : \"NO\"}\n    &lt;/ToggleButton&gt;\n  );\n};\n\nexport default VisitedRenderer;\n\n</code></pre>\n\n</div>\n\n\n\n<p>Using React-Bootstrap’s <code>ToggleButton</code>, you can easily create a button-style checkbox. The button is styled and labeled according to the prop’s value, which is set on every toggle with <code>props.setValue()</code>.</p>\n\n<p>Pay special attention to the <code>id</code> prop. It’s important for it to be unique, as React-Bootstrap uses it as an HTML <code>id</code> attribute, matching the underlying <code>&lt;input&gt;</code> checkbox and button-styled <code>&lt;label&gt;</code>.</p>\n\n<p>Now all you have to do is load the cell renderer in <strong>src/App.jsx</strong> , and you should see toggle buttons appear in the column:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nimport VisitedRenderer from \"./VisitedRenderer\";\n// ...\n\nconst App = () =&gt; {\n  const [columnDefs] = useState([\n    {\n      headerName: \"Country\",\n      field: \"country\",\n    },\n    {\n      headerName: \"Image\",\n      field: \"image\",\n      flex: 1,\n      cellRenderer: ImageRenderer,\n    },\n    {\n      headerName: \"Visited\",\n      field: \"visited\",\n      // Set VisitedRenderer component as cell renderer\n      cellRenderer: VisitedRenderer,\n    },\n  ]);\n  // ...\n};\n\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IAAmoOLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/ag-grid-toggle-buttons-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IAAmoOLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/ag-grid-toggle-buttons-tiny.png\" alt=\"Using React-Bootstrap and AG Grid\" width=\"880\" height=\"550\"></a></p>\n\n<h3>\n  \n  \n  Customizing Column Header\n</h3>\n\n<p>One of many great things about AG Grid is that it’s very customizable, far beyond custom cell renderers. You can utilize this customizability together with React-Bootstrap to build—e.g., custom column headers with different functionalities.</p>\n\n<h4>\n  \n  \n  Setting up External Filter\n</h4>\n\n<p>For this example, you’ll build a custom header for the visited column with the ability to filter the list for only the visited countries. Start by adding an external filter to the grid in <strong>src/App.jsx</strong> :<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { useEffect, useState, useRef } from \"react\";\n// ...\n\nconst App = () =&gt; {\n  const gridRef = useRef();\n  const [filterEnabled, setFilterEnabled] = useState(false);\n  // ...\n  const doesExternalFilterPass = (node) =&gt; {\n    return node.data.visited;\n  };\n\n  useEffect(() =&gt; {\n    if (gridRef.current &amp;&amp; gridRef.current.api) {\n      gridRef.current.api.onFilterChanged();\n    }\n  }, [filterEnabled]);\n\n  return (\n    &lt;Card body className=\"h-100\"&gt;\n      &lt;Stack className=\"h-100\"&gt;\n        &lt;Card.Title&gt;Countries to visit&lt;/Card.Title&gt;\n        &lt;div className=\"ag-theme-material h-100 w-100\"&gt;\n          &lt;AgGridReact\n            ref={gridRef}\n            columnDefs={columnDefs}\n            rowData={rowData}\n            rowHeight={200}\n            doesExternalFilterPass={doesExternalFilterPass}\n            isExternalFilterPresent={() =&gt; filterEnabled}\n          &gt;&lt;/AgGridReact&gt;\n        &lt;/div&gt;\n      &lt;/Stack&gt;\n    &lt;/Card&gt;\n  );\n};\n\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>In AG Grid, <a href=\"https://www.ag-grid.com/react-data-grid/filter-external/\">external filters</a> allow you to mix your custom filtering logic with the mechanisms already integrated into the grid. To enable them, you have to provide two additional props:</p>\n\n<ul>\n<li>\n<code>doesExternalFilterPass</code>: This is the actual filter function; given a node, it should return a Boolean indicating whether or not to include the row in the result.</li>\n<li>\n<code>isExternalFilterPresent</code>: This is a function returning a Boolean that informs the grid about the presence of the external filter.</li>\n</ul>\n\n<p>In the code above, the external filter is controlled by a <code>filterEnabled</code> state property and a <code>doesExternalFilterPass()</code> function, which extracts the <code>visited</code> boolean from row data to filter the grid.</p>\n\n<p>To make the grid process the filter accordingly on <code>filterEnabled</code> change, you must first inform it about a change in the filter configuration using <code>api.onFilterChanged()</code>.</p>\n\n<p>The <code>api</code> object is accessible on the grid element; thus, you should use the <code>useRef()</code> hook to create a reference to it first. Then, with the <code>useEffect()</code> hook, call <code>api.onFilterChanged()</code> every time <code>filterEnabled</code> changes.</p>\n\n<h4>\n  \n  \n  Adding Toggle Button Header\n</h4>\n\n<p>With the external filter ready, now it’s just a matter of creating a custom header component that will set <code>filterEnabled</code>.</p>\n\n<p>In <strong>src/VisitedHeader.jsx</strong> , create the following component:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { useState, useEffect } from \"react\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nconst VisitedHeader = (props) =&gt; {\n  const [checked, setChecked] = useState(false);\n\n  useEffect(() =&gt; {\n    props.setFilterEnabled(checked);\n  }, [checked]);\n\n  return (\n    &lt;ToggleButton\n      id=\"filter-visited\"\n      type=\"checkbox\"\n      variant={checked ? \"outline-primary\" : \"outline-secondary\"}\n      checked={checked}\n      value=\"1\"\n      onChange={(e) =&gt; {\n        setChecked(e.currentTarget.checked);\n      }}\n    &gt;\n      Visited\n    &lt;/ToggleButton&gt;\n  );\n};\n\nexport default VisitedHeader;\n\n</code></pre>\n\n</div>\n\n\n\n<p><code>VisitedHeader</code> once again uses React-Bootstrap’s <code>ToggleButton</code> with custom <code>id</code> and value-based styling. On top of that, it has its own state property, <code>checked</code>, to keep track of the toggle button. The parent component is notified about every change with the <code>useEffect()</code> and <code>setFilterEnabled()</code> method passed through the props.</p>\n\n<p>Back in the <strong>src/App.jsx</strong> file, you should set the header component and pass the required <code>setFilterEnabled</code> prop:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// ...\nimport VisitedHeader from \"./VisitedHeader\";\n// ...\n\nconst App = () =&gt; {\n  // ...\n  const [columnDefs] = useState([\n    {\n      headerName: \"Country\",\n      field: \"country\",\n    },\n    {\n      headerName: \"Image\",\n      field: \"image\",\n      flex: 1,\n      cellRenderer: ImageRenderer,\n    },\n    {\n      headerName: \"Visited\",\n      // Set VisitedHeader component as header component\n      headerComponent: VisitedHeader,\n      // Pass additional props to the header component\n      headerComponentParams: {\n        setFilterEnabled,\n      },\n      field: \"visited\",\n      cellRenderer: VisitedRenderer,\n    },\n  ]);\n\n  // ...\n};\n\n// ...\n\n</code></pre>\n\n</div>\n\n\n\n<p>It’s worth noting that AG Grid also provides a distinctive <code>headerComponentParams</code> property to pass custom props to the header component (aside from the grid-provided ones). The component itself can be set using the <code>headerComponent</code> property.</p>\n\n<p>The final result looks like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--c4nMNqXk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/final-result-ag-grid-bootstrap-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--c4nMNqXk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/final-result-ag-grid-bootstrap-tiny.png\" alt=\"Using React-Bootstrap and AG Grid\" width=\"880\" height=\"550\"></a></p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>In this article, you’ve learned how you can use AG Grid and React-Bootstrap together, as well as how customizable AG Grid really is. By using AG Grid’s React Data Grid, you not only get a great, highly advanced grid view but also easy access to the ecosystem of the leading JS UI framework. With such powerful tools, the only limit to your app is your imagination.</p>\n\n<p>AG Grid is the leading JavaScript Grid. It should be your go-to open source tool whenever you need a batteries-included grid solution, with advanced features like live data streaming, charting, editing, and more. Check out AG Grid’s <a href=\"https://www.ag-grid.com/react-data-grid/\">official documentation</a> to learn more.</p>\n\n",
      "category": "tutorial"
  },
  {
      "title": "How to Optimize a React Application Using Hooks and AG Grid",
      "creator": "Alan Richardson",
      "pubDate": "2022-07-18T11:28:52.000Z",
      "link": "https://dev.to/ag-grid/how-to-optimize-a-react-application-using-hooks-and-ag-grid-26bn",
      "guid": "https://dev.to/ag-grid/how-to-optimize-a-react-application-using-hooks-and-ag-grid-26bn",
      "description": "<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lYTkPkDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/blog-optimizing-hooks-react-opt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lYTkPkDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/blog-optimizing-hooks-react-opt.png\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"688\" height=\"400\"></a></p>\n\n<p><em>This post contributed to the AG Grid blog by <a href=\"https://twitter.com/cpave3\">Cameron Pavey</a>.</em></p>\n\n<p><a href=\"https://reactjs.org\">React</a> describes itself as a “JavaScript library for building user interfaces.” Its internal workings are quite complex, but there are essentially two main pieces: React itself and the <a href=\"https://reactjs.org/docs/test-renderer.html\">React renderer</a>, which is <code>react-dom</code> in the case of web browsers.</p>\n\n<p>The main React library is responsible for taking your code and converting it to a structure that a React renderer, such as <code>react-dom</code>, can then use to reconcile the <em>desired state</em> with the <em>current state</em>, and make the necessary changes for those two states to converge. How you write your code can have a great impact on the magnitude of these changes. It’s not uncommon for React to make more changes than strictly necessary when reconciling the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">Document Object Model (DOM)</a>. These changes, or “renders,” can typically be reduced by optimizing your code in various ways. Such optimizations are generally desirable, but even more so when dealing with large volumes of data or many DOM nodes. While unoptimized code may not be problematic in small quantities, at scale, it can quickly affect user experience.</p>\n\n<p>In this guide, you’ll learn about some of these optimizations. You’ll also learn about some common mistakes that can lead to unnecessary renders, and you’ll see how you can avoid them.</p>\n\n<p><a href=\"https://www.ag-grid.com\">AG Grid</a>, a high-performance Data Grid, plays a large role in this guide. It works well with most leading frontend libraries, including React, and provides a good use case for the optimizations discussed here for two reasons. Firstly, AG Grid itself is optimized internally, and thus the impact of poorly optimized code surrounding it is more apparent. Secondly, AG Grid is capable of dealing with tremendous amounts of data, which can often have an adverse impact on performance if mishandled, but is also an excellent way to test the efficacy of supposed code optimizations at scale.</p>\n\n<h2>\n  \n  \n  Profiling the Unoptimized Grid\n</h2>\n\n<p>In order to focus on the optimizations themselves, this guide won’t cover the building of the unoptimized application step by step. Instead, if you’d like to follow along, you can clone the unoptimized source code for this guide from the <a href=\"https://github.com/cpave3/ag-grid-optimizations\">public GitHub repo</a>.</p>\n\n<p>You also need the following prerequisites:</p>\n\n<ul>\n<li>a recent version of <a href=\"https://nodejs.org/en/download/\">Node.js and npm</a>\n</li>\n<li>a code editor (<a href=\"https://code.visualstudio.com/\">VS Code</a> is a good choice if you don’t have an existing preference.)</li>\n</ul>\n\n<p>As mentioned before, AG Grid is already <a href=\"https://build.ag-grid.com/react-data-grid/reactui/#no-wasted-renders\">quite heavily optimized</a>, so much so that any adverse performance issues you may encounter while using it are likely to be in your application code, and the code surrounding your usage of the Grid component. To this end, the optimizations covered in this article will primarily focus on this surrounding code to help ensure that you’re using AG Grid as responsibly as possible.</p>\n\n<p>To establish a baseline for these optimizations, you need to see how the current unoptimized application performs. There are a few different ways to do this. The most common way is to use the <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\">React Developer Tools</a> browser extension, which includes a purpose-built profiler. This profiler lets you see details about your application, like which components were re-rendered in a given <a href=\"https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html#browsing-commits\">commit</a>, why they were re-rendered, and how long it took to do so. If you want to follow along with this tutorial, go ahead and add this extension to your browser.</p>\n\n<p>Once you’ve cloned the demo application from the <a href=\"https://github.com/cpave3/ag-grid-optimizations\">public GitHub repo</a>, navigate into the newly created directory, and run the following commands:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install\nnpm run start\n\n</code></pre>\n\n</div>\n\n\n\n<p>This command installs the code dependencies and starts the development server. Once started, the development server will indicate which port it’s running on (typically port 3000) and open the demo application in your default browser.</p>\n\n<p>When the page has loaded, you should see something like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--F1wPsd9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/initial-page-load-opt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--F1wPsd9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/initial-page-load-opt.png\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"880\" height=\"564\"></a></p>\n\n<p>Open the developer tools by right-clicking somewhere on the page and selecting <strong>Inspect</strong>. By default, this will open the <strong>Elements</strong> tab. You can find the React DevTools Profiler by selecting the <strong>Profiler</strong> tab. You may need to click the <strong>arrow icon</strong> at the end of the tabs to see it:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7DMAaok7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/devs-profiler-opt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7DMAaok7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/devs-profiler-opt.png\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"880\" height=\"564\"></a></p>\n\n<p>The DevTools are quite extensive, and their full functionality is beyond the scope of this guide. If you want to learn more about the DevTools as a whole, you can start with this <a href=\"https://www.digitalocean.com/community/tutorials/how-to-debug-react-components-using-react-developer-tools\">guide</a> that focuses primarily on the profiling functionality.</p>\n\n<p>The unoptimized Grid has a few issues that cause unnecessary re-renders. To help identify these, some visual aids have been added, but it’s also possible to see them in the profiler. To get a consistent baseline for later measurements, it helps to do some controlled checks that you can replicate later. In this initial measurement, perform the following actions:</p>\n\n<ul>\n<li>Start the profiler recording</li>\n<li>For each of the first four cells in the <strong>First_name</strong> column, click on the cell once</li>\n<li>Next, click the <strong>Change Columns</strong> button four times</li>\n<li>Stop the profiler recording</li>\n</ul>\n\n<p>As you interact with the table, you’ll notice that some visual aspects changed like the color of the <strong>Id</strong> column and the numbers prefixing the <strong>First_name</strong> values. These are visual helpers added to show when certain components have re-rendered. Before you learn about this in more detail, let’s take a look at the results in the profiler:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ndaroefv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/unoptimized-opt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ndaroefv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/unoptimized-opt.png\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"880\" height=\"564\"></a></p>\n\n<p>Your exact output may vary if you didn’t follow the actions outlined above precisely. Near the top of the profiler, there is a small chart that you can cycle through, along with some numbers:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hD_p-1Ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/chart-opt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hD_p-1Ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/chart-opt.png\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"393\" height=\"187\"></a></p>\n\n<p>This chart represents the <strong>commits</strong> made by React and their relative durations. The larger the bar, the longer the commit took. In this scenario, the commits don’t take very long (the largest one only takes about 12 ms). However, the principles here apply equally to larger React applications that may be affected by more adverse performance issues, with renders that take anywhere from 100 ms to full seconds.</p>\n\n<p>As you cycle through the commits, different parts of the flame graph will be highlighted, representing the re-rendered components in a given commit. Looking at the previous screenshot, you can see that in the highlighted commit (and the other similar spikes in the graph), all of the rows re-rendered. This results in the slowest commits out of those that the profiler captured. If you go back and look at the first few commits, you can similarly see that each time you clicked on one of the cells, it caused two cells to be re-rendered—the one that you clicked on and the one that you were already focused on:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BcGZGXap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/cell-renderers-profile-opt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BcGZGXap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/cell-renderers-profile-opt.png\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"880\" height=\"564\"></a></p>\n\n<p>This can cause inefficiencies if those cells are using expensive, poorly optimized <a href=\"https://www.ag-grid.com/react-data-grid/component-cell-renderer/\">custom cell renderers</a>. The <strong>First_name</strong> column uses a custom cell renderer to display the counter in parenthesis. This counter will increment by one, each time the component is re-rendered. This is a fairly inexpensive operation, but you can see how often it’s triggered by clicking around on these cells. If this were a more expensive operation, it could have a significant impact. Similarly, each time you click the <strong>Change Columns</strong> button, the <code>columnDefs</code> prop on the AG Grid component is updated with a similar (though not identical) value. As a side effect of this, the object that defines the column’s coloring gets recreated each time this happens with a random color:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6xdKQ1xD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/anim-unoptimized-app.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6xdKQ1xD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/anim-unoptimized-app.gif\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"698\" height=\"516\"></a></p>\n\n<h2>\n  \n  \n  Optimizing the Grid\n</h2>\n\n<p>In the next section, you’ll learn a few techniques that you can use to optimize your application and reduce some of the unnecessary re-renders. After the optimizations, you can run the profiler again while performing the same actions listed above. This will give you clear data showing what impact the optimizations had. Before proceeding, you may want to download the data in this profile for future comparison. You can do this by clicking the <strong>down arrow icon</strong> in the top left corner:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DujnGQOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/save-profile-opt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DujnGQOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/save-profile-opt.png\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"324\" height=\"178\"></a></p>\n\n<h3>\n  \n  \n  Memoized Components\n</h3>\n\n<p>If you haven’t already done so, open the cloned codebase in your editor of choice. The first optimization to look at relates to the custom cell renderers. The counter included in this component increments each time it is re-rendered, but essentially all of these re-renders are wasted because the cell’s content doesn’t change. You can alleviate this issue with the <a href=\"https://reactjs.org/docs/react-api.html#reactmemo\"><code>React.memo</code></a> Higher-Order Component (HOC) that wraps your components and essentially returns the previously computed value if none of the inputs changed.</p>\n\n<p>Begin by opening the file located at <code>src/components/name-formatter.jsx</code>, which is currently just a normal Function Component. To stop it from needlessly re-computing its output, all you need to do is wrap it in the HOC like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import * as React from 'react';\n\nconst NameFormatter = React.memo(({ value }) =&gt; {\n  const renderCountRef = React.useRef(1);\n  return (\n    &lt;strong&gt;\n    {`(${renderCountRef.current++}) ${value}`}\n    &lt;/strong&gt;\n  );\n});\n\nexport default NameFormatter;\n\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>Please note: It’s inadvisable to simply wrap all of your components with this HOC. There is a time and a place for it, but generally, if you have a component that renders often and renders deterministically, that is, for a given set of input props, it will always give the same output. Wrapping it with <code>React.memo</code> can help you eliminate some excess renders.</p>\n</blockquote>\n\n<p>After the application has reloaded, save your changes, and then click on the <strong>First_name</strong> cells. You should find that doing so no longer causes the counters to increment. React simply uses the previously returned value rather than rendering a newly computed value because the input props don’t change:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CZyGxeWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/optimized-renderer.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CZyGxeWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/optimized-renderer.gif\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"698\" height=\"516\"></a></p>\n\n<h3>\n  \n  \n  Caching Expensive Values\n</h3>\n\n<p>You may have noticed that when you interact with the unoptimized Grid and click the <strong>Change Columns</strong> button, the rows in the table change. This data is randomly generated with a library called <code>@faker-js/faker</code>. In real life, this data would likely be coming from an API endpoint. For simplicity, this data generator is being used in favor of a real API. However, the principle behind this optimization remains the same.</p>\n\n<p>In this instance, the value produced by the fake data generator is not being preserved when the Grid component re-renders. Each time input props change, all of the data is regenerated. If this was an API call, it would likely be making network requests each time the props change instead. This behavior is not optimal because of its impact on performance and, in most cases, it wastes resources. Typically, it would be better to cache this value and reuse it between renders. There are some cases where you might want to regenerate or re-fetch the data, but this should be done deliberately and not as a side effect of poorly optimized code.</p>\n\n<p>There are a few different React hooks that you can use to cache your data, depending on the scenario. For reference, the current unoptimized implementation in <code>src/components/grid.jsx</code> has the data generator function being called without any hooks, so it will be called on each render:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// Unoptimized\nfunction Grid({ columnDefs, defaultColDef }) {\n  // This will be called on each render  \n  const data = getData(10);\n\n  return (\n    &lt;div className=\"ag-theme-alpine\" style={{ height: '98vh' }}&gt;\n    &lt;AgGridReact\n        maintainColumnOrder\n        defaultColDef={defaultColDef}\n        rowData={data}\n        columnDefs={columnDefs}\n    /&gt;\n    &lt;/div&gt;\n  );\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>If your data is coming from a synchronous function, as is the case here, you can wrap the value with the <code>React.useMemo</code> hook. This behaves similarly to the aforementioned <code>React.memo</code>, but rather than being a HOC, it’s a hook that you can apply to values other than just components and its approach looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>function Grid({ columnDefs, defaultColDef }) {\n  // This value will now persist between renders\n  const data = React.useMemo(() =&gt; getData(10), []);\n\n  return (\n    &lt;div className=\"ag-theme-alpine\" style={{ height: '98vh' }}&gt;\n    &lt;AgGridReact\n        maintainColumnOrder\n        defaultColDef={defaultColDef}\n        rowData={data}\n        columnDefs={columnDefs}\n    /&gt;\n    &lt;/div&gt;\n  );\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>This approach works well for functions like <code>getData</code> here, but does not work so well for asynchronous operations like API calls. In such cases, you can instead use a combination of <code>React.useState</code> and <code>React.useEffect</code> to asynchronously call the API, and set the value into a state hook when it resolves. That approach looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>function Grid({ columnDefs, defaultColDef }) {\n  const [data, setData] = React.useState([]);\n\n  // This effect will be invoked the first time the component renders\n  React.useEffect(() =&gt; {\n    (async () =&gt; {\n            // This value will be persisted between renders\n    setData(getData(10));\n    })();\n  }, []);\n\n  return (\n    &lt;div className=\"ag-theme-alpine\" style={{ height: '98vh' }}&gt;\n    &lt;AgGridReact\n        maintainColumnOrder\n        defaultColDef={defaultColDef}\n        rowData={data}\n        columnDefs={columnDefs}\n    /&gt;\n    &lt;/div&gt;\n  );\n}\n\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>Note that while <code>getData</code> is not an asynchronous function, this pattern works here and can be used with asynchronous API calls. Deciding which pattern is best for you will depend on the specifics of your application; however, between <code>React.useState</code>, <code>React.useEffect</code>, and <code>React.useMemo</code>, you should be able to derive a solution for most scenarios. It’s a good idea to <a href=\"https://reactjs.org/docs/hooks-intro.html\">familiarize yourself with React Hooks</a> if you have not already done so, as they have some rather nuanced behavior but are generally quite powerful.</p>\n</blockquote>\n\n<p>After applying either of these optimizations (the <code>useMemo</code> approach or the <code>useEffect</code> approach), you will discover that the rows themselves no longer change when you click <strong>Change Columns</strong>. The data is now persisted between renders:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LaFzvcmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/optimized-row.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LaFzvcmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/optimized-row.gif\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"698\" height=\"516\"></a></p>\n\n<p>The next optimization addresses the random colors being assigned to the <strong>Id</strong> column.</p>\n\n<h3>\n  \n  \n  Extracting Static Values\n</h3>\n\n<p>If you look at <code>src/app.jsx</code>, you’ll see the following block of code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const updateColumns = () =&gt; {\n    setColumnDefs([\n    { field: 'id', cellStyle: { background: randomColor() } },\n    { field: 'first_name', cellRenderer: NameFormatter },\n    { field: 'last_name' },\n    { field: 'email' },\n    { field: 'gender' },\n    { field: 'ip_address' },\n    ]);\n  };\n\n</code></pre>\n\n</div>\n\n\n\n<p>The first object in this array has a property called <code>cellStyle</code>. This property contains a CSS style object that will be applied to all of the cells in this column. In this instance, the value of this property is dynamically computed each time the <code>updateColumns</code> function is called, which is why the column color changes each time you click the <strong>Change Columns</strong> button. This is a contrived example to demonstrate that passing objects by value like this results in a new instance of the object being created each time and is not desirable behavior. Even if the column definitions were to change, it’s unnecessary to recompute all of the values for all of their properties. You can eliminate the color-changing behavior of the column by making the following optimizations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>// 1. Extract the value of the cellStyle property to outside of the App component\nconst cellStyle = { background: randomColor() };\n\nfunction App() {\n…\n// 2. Update the updateColumns function to use this extracted value\n  const updateColumns = () =&gt; {\n    setColumnDefs([\n    { field: 'id', cellStyle },\n    { field: 'first_name', cellRenderer: NameFormatter },\n    { field: 'last_name' },\n    { field: 'email' },\n    { field: 'gender' },\n    { field: 'ip_address' },\n    ]);\n  };\n\n</code></pre>\n\n</div>\n\n\n\n<p>Now, whenever <code>updateColumns</code> is called, although the <code>columnDefs</code> prop will still change, the style object applied to the <strong>Id</strong> column will remain consistent, thus eliminating the random color changes. It should be noted that it will still change color after the first time you click the <strong>Change Columns</strong> button, as the initial value supplied to the <code>useState</code> hook does not have a <code>cellStyle</code> supplied for that column.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7Doc9KCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/optimized-app.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7Doc9KCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/optimized-app.gif\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"698\" height=\"516\"></a></p>\n\n<h2>\n  \n  \n  Profiling the Optimized Grid\n</h2>\n\n<p>With these optimizations applied, you can see that AG Grid’s behavior is perceptibly less erratic. Now it’s time to profile the application again to see if these optimizations have a measurable impact. To do this, run through the same actions taken during the first measurements, listed here again for your convenience:</p>\n\n<ul>\n<li>Start the profiler recording</li>\n<li>For each of the first four cells in the <strong>First_name</strong> column, click on the cell once</li>\n<li>Next, click the <strong>Change Columns</strong> button four times</li>\n<li>Stop the profiler recording</li>\n</ul>\n\n<p>After stopping the profiler, you should see something like this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kxQstT35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/optimized-profile-opt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kxQstT35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/optimized-profile-opt.png\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"880\" height=\"561\"></a></p>\n\n<p>You will note that the number of commits is down to twelve (from the original twenty-six), and there is only one large spike this time (instead of four), which corresponds with the one time the <code>cellStyle</code> changes. The optimizations have had a respectable impact on the render performance of this application.</p>\n\n<p>Understanding how and why these optimizations work puts you in a position to apply them at your discretion. Not every application will be as simple as this contrived example, but the patterns used here are generally applicable in many real-world scenarios.</p>\n\n<h2>\n  \n  \n  Increasing the Amount of Data\n</h2>\n\n<p>In a real application, you will likely be dealing with much larger volumes of data than the ten rows in this demo application. To ensure these optimizations hold up under load, you can easily tweak the random data generator call found in <code>src/components/grid.jsx</code> to generate 100,000 rows of data or more. To do this, tweak the <code>useEffect</code> block this way:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  React.useEffect(() =&gt; {\n    (async () =&gt; {\n    setData(getData(100000));\n    })();\n  }, []);\n\n</code></pre>\n\n</div>\n\n\n\n<p>Now, if you save and reload the page, you should see a lot more data. You can run the profiler and step through the actions again, but you will likely find that there isn’t any perceptible performance difference. This is largely thanks to optimizations built into AG Grid, including virtualization.</p>\n\n<p>A source of performance issues for many browsers is the DOM. When the DOM has too many nodes (such as 100,000 table rows), it’s easy for performance to suffer if these nodes exhibit any kind of complexity beyond being simple text containers. One of the most common ways to solve this is through <a href=\"https://www.ag-grid.com/react-data-grid/dom-virtualisation/\">DOM Virtualization</a>, where only the visible elements are rendered. As the user scrolls, React will render new elements as they come into view, and old elements will be removed once they are no longer visible. You can see this in practice using React DevTools.</p>\n\n<p>Aside from the profiler, there is also a <strong>Components</strong> tab that you can access. This tab will show you all of the React components rendered on the page and details about them. If you navigate to this view and scroll down the Grid, you will notice that the number of row components doesn’t increase or decrease much (there is slight fluctuation when rows are half visible), but the rows themselves change. This is virtualization in action:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QMuc6zHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/dom-virtualization-opt.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QMuc6zHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/05/dom-virtualization-opt.gif\" alt=\"How to Optimize a React Application Using Hooks and AG Grid\" width=\"880\" height=\"641\"></a></p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>In this article, you’ve seen how poorly optimized code can have a detrimental impact on the render performance of your application. You have also learned how to leverage React Hooks to apply optimizations to reduce this impact. It’s important to be aware of optimizations like these to avoid making such mistakes in your applications. Those mistakes can lead to unnecessary re-renders even when using highly optimized libraries like <a href=\"https://www.ag-grid.com\">AG Grid</a>.</p>\n\n<p>Aside from DOM virtualization, AG Grid applies numerous optimizations internally to ensure that there are no wasted renders from the library itself. Keenly optimized performance is just one of the benefits. AG Grid also has numerous powerful features, from handling massive amounts of data to livestreaming data updates and integrated charting. If you’re looking for a robust all-in-one Data Grid solution, and performance is a must, give <a href=\"https://www.ag-grid.com\">AG Grid</a> a try.</p>\n\n<p>All the code samples in this article can be found in this <a href=\"https://github.com/cpave3/ag-grid-optimizations\">GitHub repo</a>.</p>\n\n",
      "category": "react"
  },
  {
      "title": "AG Grid: Typescript Generics",
      "creator": "Stephen Cooper",
      "pubDate": "2022-07-14T10:31:53.000Z",
      "link": "https://dev.to/ag-grid/ag-grid-typescript-generics-21bh",
      "guid": "https://dev.to/ag-grid/ag-grid-typescript-generics-21bh",
      "description": "<p>In this article, we will show you how to make the most of Typescript Generics in AG Grid <a href=\"https://blog.ag-grid.com/whats-new-in-ag-grid-28/\">v28</a>. We will demonstrate the great developer experience it unlocks with the help of code examples.</p>\n\n<h2>\n  \n  \n  AG Grid Generic Types\n</h2>\n\n<p>There are two generic types that you can pass to AG Grid interfaces. They are: <code>TData</code> and <code>TValue</code>.  </p>\n\n<h3>\n  \n  \n  TData - Row Data Type\n</h3>\n\n<p><code>TData</code> is used to represent the shape of row data items. This generic parameter should match the interface used when defining your row data. If an AG Grid interface has a <code>TData</code> generic parameter this will always refer to the row data type.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">GridOptions</span><span class=\"o\">&lt;</span><span class=\"nx\">TData</span> <span class=\"o\">=</span> <span class=\"kr\">any</span><span class=\"o\">&gt;</span><span class=\"p\">{</span>\n    <span class=\"na\">rowData</span><span class=\"p\">:</span> <span class=\"nx\">TData</span><span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>To maintain backwards compatibility a default type of <code>any</code> is provided. This mimics the behaviour of previous versions of AG Grid that explicitly type the rowData as <code>any[]</code>.</p>\n\n<h3>\n  \n  \n  TValue - Cell Value Type\n</h3>\n\n<p><code>TValue</code> is used to represent the type of a specific cell value. This generic type is more limited in scope and can be used within cell renderers/value getters when you want to give a type to the <code>value</code> property.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">GetQuickFilterTextParams</span><span class=\"o\">&lt;</span><span class=\"nx\">TData</span> <span class=\"o\">=</span> <span class=\"kr\">any</span><span class=\"p\">,</span> <span class=\"nx\">TValue</span> <span class=\"o\">=</span> <span class=\"kr\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/** Value for the cell. */</span>\n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">TValue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>As with <code>TData</code>, we also default <code>TValue</code> to <code>any</code> to maintain backwards compatibility.</p>\n\n<h2>\n  \n  \n  Using Generic Types\n</h2>\n\n<p>In the examples below we use the <code>ICar</code> interface to represent row data.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// Row Data interface</span>\n<span class=\"kr\">interface</span> <span class=\"nx\">ICar</span> <span class=\"p\">{</span>\n    <span class=\"nl\">make</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"nl\">model</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n    <span class=\"nl\">price</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">rowData</span><span class=\"p\">:</span> <span class=\"nx\">ICar</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span> <span class=\"na\">make</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Toyota</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">model</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Celica</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">price</span><span class=\"p\">:</span> <span class=\"mi\">35000</span> <span class=\"p\">},</span>\n  <span class=\"p\">{</span> <span class=\"na\">make</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Porsche</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">model</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Boxster</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">price</span><span class=\"p\">:</span> <span class=\"mi\">72000</span> <span class=\"p\">}</span>\n<span class=\"p\">];</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The best place to assign <code>ICar</code> to the <code>TData</code> generic parameter is via the <code>GridOptions</code> interface. This will cascade the generic type down the interface hierarchy.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// Pass ICar to GridOptions as a generic</span>\n<span class=\"kd\">const</span> <span class=\"nx\">gridOptions</span><span class=\"p\">:</span> <span class=\"nx\">GridOptions</span><span class=\"o\">&lt;</span><span class=\"nx\">ICar</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// rowData is typed as ICar[]</span>\n    <span class=\"na\">rowData</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"na\">make</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Ford</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">model</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Galaxy</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">price</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}</span> <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>With the generic parameter set to <code>ICar</code>, the <code>rowData</code> property has the type <code>ICar[]</code> instead of the default <code>any[]</code>. This means that if you mistype one of the properties you will get a compile-time error.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NGkaTfpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkudnm386ilzudfmlr3d.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NGkaTfpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkudnm386ilzudfmlr3d.png\" alt=\"Row Data enforces ICar interface\" width=\"880\" height=\"287\"></a></p>\n\n<p>It is worth noting that it is not just <code>rowData</code> where the interface is used. For example, in the <code>getRowId</code> callback, the <code>params.data</code> property is typed as <code>ICar</code> instead of <code>any</code>. This is a result of AG Grid cascading the generic type down from <code>GridOptions</code>.</p>\n\n<p>This also applies to all the grid events that contain a data property. i.e <code>onRowSelected</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">gridOptions</span><span class=\"p\">:</span> <span class=\"nx\">GridOptions</span><span class=\"o\">&lt;</span><span class=\"nx\">ICar</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Callback with params type: GetRowIdParams&lt;ICar&gt;</span>\n    <span class=\"na\">getRowId</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// params.data : ICar</span>\n        <span class=\"k\">return</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">make</span> <span class=\"o\">+</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\">// Event with type: RowSelectedEvent&lt;ICar&gt;</span>\n    <span class=\"na\">onRowSelected</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// event.data: ICar | undefined</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">price</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">price</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If you use the grid api via <code>gridOptions.api</code> or callback <code>params.api</code> properties, then the api will be aware of the row data type too. This means that the method <code>api.getSelectedRows()</code> will return rows as <code>ICar[]</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// Grid Api methods use ICar interface</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onSelection</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">cars</span><span class=\"p\">:</span> <span class=\"nx\">ICar</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"nx\">gridOptions</span><span class=\"p\">.</span><span class=\"nx\">api</span><span class=\"o\">!</span><span class=\"p\">.</span><span class=\"nx\">getSelectedRows</span><span class=\"p\">();</span>  \n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Configure via Individual Interfaces\n</h3>\n\n<p>While it is possible to configure everything inline within a <code>gridOptions</code> object, you may want to split things out for readability / re-usability. To benefit from Typescript generics we can provide our <code>ICar</code> interface to any AG Grid interface that accepts a <code>TData</code> generic parameter. </p>\n\n<p>For example, we could configure our event handler with <br>\n <code>RowSelectedEvent&lt;ICar&gt;</code>. This results in the <code>event.data</code> property being typed as <code>ICar | undefined</code>. (See <em>Generic Type or Undefined</em> below for more details on the additional <code>undefined</code> type).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">function</span> <span class=\"nx\">onRowSelected</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">RowSelectedEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">ICar</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// event.data: ICar | undefined</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">price</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">price</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Advantages over any\n</h2>\n\n<p>There are two main reasons to provide generic types to AG Grid:</p>\n\n<ul>\n<li>Compile-time errors</li>\n<li>Auto-completion in your IDE</li>\n</ul>\n\n<h3>\n  \n  \n  Compile Time Errors\n</h3>\n\n<p>Say we mistyped <code>price</code> as <code>prive</code>. Without generics, your application code would compile but your grid would no longer show prices in the grid. You would then have to track down the source of the bug. It could even be possible that this type of bug escapes into production if it slips past your tests. </p>\n\n<p>However, if you supply generic types your application would not compile and would tell you the exact location of the bug. This enables you to instantly correct the code, instead of having to track down the bug. It will also be underlined with a red squiggle in your IDE! </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eh1yAuBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfbit9jbag266me45s5s.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eh1yAuBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfbit9jbag266me45s5s.png\" alt=\"Compile time error for incorrect property name\" width=\"880\" height=\"314\"></a></p>\n\n<h3>\n  \n  \n  Auto-Completion\n</h3>\n\n<p>As Typescript knows that our <code>data</code> object conforms to the <code>ICar</code> interface our IDE can suggest properties to us. This speeds up your development process as you do not have to spend time thinking about property names as they are suggested to you automatically. </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qfJ8bWhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bu459i2hbchhx81kush2.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qfJ8bWhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bu459i2hbchhx81kush2.png\" alt=\"Auto completion of data properties based on generic type\" width=\"880\" height=\"233\"></a></p>\n\n<h2>\n  \n  \n  Framework Specific Demo\n</h2>\n\n<h3>\n  \n  \n  React\n</h3>\n\n<p>If you are using AG Grid via the React component then you can pass your row data type to the <code>AgGridReact</code> component via this syntax: <code>&lt;AgGridReact&lt;ICar&gt;</code>.</p>\n\n<p>This will validate that all <code>props</code> conform to the row data type.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight jsx\"><code><span class=\"p\">&lt;</span><span class=\"nc\">AgGridReact</span><span class=\"err\">&lt;</span><span class=\"na\">ICar</span><span class=\"p\">&gt;</span>\n   ref=<span class=\"si\">{</span><span class=\"nx\">gridRef</span><span class=\"si\">}</span>\n   rowData=<span class=\"si\">{</span><span class=\"nx\">rowData</span><span class=\"si\">}</span>\n   columnDefs=<span class=\"si\">{</span><span class=\"nx\">columnDefs</span><span class=\"si\">}</span>\n   onGridReady=<span class=\"si\">{</span><span class=\"nx\">onGridReady</span><span class=\"si\">}</span>\n&gt;<span class=\"p\">&lt;/</span><span class=\"nc\">AgGridReact</span><span class=\"p\">&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If you provide conflicting types you will get a compile-time error. For example, here we have provided a different generic type, <code>INotCar</code> to the <code>onGridReady</code> event which does not match our <code>rowData</code> of <code>ICar</code>.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gbglcjwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvg9rmigrytqqqt9xagx.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gbglcjwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvg9rmigrytqqqt9xagx.png\" alt=\"React validating generic types are consistent\" width=\"880\" height=\"296\"></a></p>\n\n<h3>\n  \n  \n  Angular\n</h3>\n\n<p>For Angular, providing a type to your <code>rowData</code> property is enough to enable generics for the entire component.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code> <span class=\"k\">public</span> <span class=\"nx\">rowData</span><span class=\"p\">:</span> <span class=\"nx\">ICar</span><span class=\"p\">[];</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code> <span class=\"nt\">&lt;ag-grid-angular</span>\n      <span class=\"na\">[columnDefs]=</span><span class=\"s\">\"columnDefs\"</span>\n      <span class=\"na\">[rowData]=</span><span class=\"s\">\"rowData\"</span>\n      <span class=\"na\">(gridReady)=</span><span class=\"s\">\"onGridReady($event)\"</span>\n    <span class=\"nt\">&gt;&lt;/ag-grid-angular&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If you are not using the <code>rowData</code> property, then type any other input/output that takes the generic parameter. For example, setting the following type on the <code>onGridReady</code> event would set the generic type for the entire component.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"nx\">onGridReady</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">GridReadyEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">ICar</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If you provide conflicting types you will get a compile-time error. For example, here we have provided a different generic type, <code>INotCar</code> to the <code>onGridReady</code> event which does not match our <code>rowData</code> type of <code>ICar</code>.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UV4pM00G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylxp83ir65wbvjh9z0lk.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UV4pM00G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylxp83ir65wbvjh9z0lk.png\" alt=\"Angular validating generic types are consistent\" width=\"880\" height=\"474\"></a></p>\n\n<h2>\n  \n  \n  Generic Type or Undefined\n</h2>\n\n<p>One thing you may notice when adding generic support to an existing application is that you may get errors relating to the <code>data</code> property potentially being <code>undefined</code>. You will not have seen this previously as the <code>data</code> property was typed as <code>any</code> which silently includes <code>undefined</code>. By specifying the type explicitly, AG Grid has the opportunity to warn you, via typings, that the data property could be <code>undefined</code> under some circumstances.</p>\n\n<p>To demonstrate this we will look at a <a href=\"https://ag-grid.com/angular-data-grid/component-cell-renderer/#data-in-cell-renderers\">common pitfall</a> that users have when adding custom cell renderers while supporting row grouping. </p>\n\n<h3>\n  \n  \n  Common Pitfall with Cell Renderers\n</h3>\n\n<p>When writing a custom cell renderer you are likely to  access the <code>data</code> property from the <code>ICellRendererParams</code> interface. Your first attempt may have code that accesses data properties with no undefined checks.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"nx\">init</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">ICellRendererParams</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n   <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">total</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">gold</span> <span class=\"o\">+</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">silver</span> <span class=\"o\">+</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">bronze</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This may work in your application but it is not technically correct or future-proof.</p>\n\n<p>If you have row grouping enabled then as soon as the user groups by a column your cell renderer will fail. This is because when grouping the <code>data</code> property is <code>undefined</code>. </p>\n\n<p>However, if you provide a generic type to <code>ICellRendererParams</code>, such as <code>IOlympicData</code>, your code will warn that the <code>data</code> property can be <code>undefined</code>.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NjJosYCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lmvk3ekt7nabfrfvalj.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NjJosYCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lmvk3ekt7nabfrfvalj.png\" alt=\"params.data can be undefined\" width=\"880\" height=\"406\"></a></p>\n\n<p>With the generic type supplied you are more likely to correctly write the cell renderer to handle this case.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"nx\">init</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">ICellRendererParams</span><span class=\"o\">&lt;</span><span class=\"nx\">IOlympicData</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">){</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">total</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">gold</span> <span class=\"o\">+</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">silver</span> <span class=\"o\">+</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">bronze</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">total</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>While it is possible to silence the \"Object is possibly 'undefined'\" errors with a non-null operator <code>!.</code> such as <code>params.data!.gold</code>, we would recommend writing your code defensively in line with the AG Grid interfaces. </p>\n</blockquote>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>If you are using Typescript then we would encourage you to take advantage of our generic types to give you: </p>\n\n<ul>\n<li>Compile-time errors</li>\n<li>Auto-completion in your IDE</li>\n<li>Improved code typings </li>\n</ul>\n\n<p>It is a small change in your type definitions that results in a greatly improved developer experience!</p>\n\n<p>For more details visit our <a href=\"https://ag-grid.com/javascript-data-grid/typescript-generics/\">Typescript Generics</a> documentation.</p>\n\n",
      "category": "typescript"
  },
  {
      "title": "Why Use a Third-Party Data Grid Component?",
      "creator": "Alan Richardson",
      "pubDate": "2022-07-12T12:52:13.000Z",
      "link": "https://dev.to/ag-grid/why-use-a-third-party-data-grid-component-15da",
      "guid": "https://dev.to/ag-grid/why-use-a-third-party-data-grid-component-15da",
      "description": "<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--73cUpmIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/third-party-data-grid-why-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--73cUpmIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/third-party-data-grid-why-tiny.png\" alt=\"Why Use a Third-Party Data Grid Component?\" width=\"688\" height=\"400\"></a></p>\n\n<p><em>This post contributed to the AG Grid blog by <a href=\"https://twitter.com/contentbluep\">Melissa McEwen</a></em></p>\n\n<p>When it comes to implementing a data grid component in a web application, one of the toughest decisions is which component to use. You can build the data grid component yourself or choose to go with one of the many existing third-party data grid components like <a href=\"https://www.ag-grid.com\">AG Grid</a>.</p>\n\n<p>For most projects, a third-party data grid component beats building a data grid yourself. Going with a third-party solution saves your team many months of planning, development, and testing. Furthermore, third-party grid components offer the best long-term support from professional data grid developers, eliminating the need to maintain your own data grid team. Finally, for a growing business, a third-party data grid lets you scale without worrying about whether your custom code can keep up.</p>\n\n<p>In this article, you’ll learn more about when it’s appropriate to build your own grid and the pros and cons of doing so. Then, you’ll explore the reasons why using a third-party grid like AG Grid may be a better choice.</p>\n\n<h2>\n  \n  \n  The Difficulties of Building Your Own Data Grid Component\n</h2>\n\n<p>If your data grid has very simple requirements, it may seem faster to build it yourself; modern web APIs have made creating your own data grid easier than ever. Developers have even managed to build impressive data grids with just a <a href=\"https://github.com/jpmorganchase/regular-table\">basic table HTML element</a>. However, if your needs go beyond the basics, you face the challenge of building complex data grid features that may add weeks or even months to your development timeline.</p>\n\n<p>A homespun data grid might be fine for a small personal project, but for business requirements, it’s far more complex. Building the data grid requires not only developer time but also efforts in design, testing, documentation, DevOps, and management. A <a href=\"https://hbr.org/2011/09/why-your-it-project-may-be-riskier-than-you-think\">study by <em>Harvard Business Review</em></a> found that the average IT project overruns time estimates by 27 percent, with one in ten projects having an overrun of 70 percent.</p>\n\n<p>Estimating time for software projects is notoriously difficult, but examining open source projects and tutorials provides a few approximations. <a href=\"https://codeburst.io/react-code-your-own-datatable-step-by-step-video-tutorial-34fca0ca34e7\">This tutorial for building a basic data grid from scratch with React</a> is about four hours long. The features include sorting, searching, pagination, reordering columns, and filtering. What about difficult features like pivot tables? <a href=\"https://github.com/nicolaskruchten/pivottable\">This open source library for data grid pivot tables</a> has around seventeen thousand lines of code and took the lead developer many years to build.</p>\n\n<p>Furthermore, while your feature needs might be simple in the beginning, what happens when you need more? <a href=\"https://blog.ag-grid.com/prisma-io-case-study/\">Prisma, a major ORM for Node.js</a>, actually started by building their own data grid component in React. However, as their functionality grew, they realized a third-party solution would save time, so they ultimately ended up going with AG Grid.</p>\n\n<p>Unless your requirements are simple, building a data grid component is a complex task with unpredictable timelines. There’s no need to reinvent the wheel—go with a third-party data option if you want to ensure efficiency and a straightforward development process.</p>\n\n<h2>\n  \n  \n  DIY Data Grids Might Be More Expensive Than You Expect\n</h2>\n\n<p>Building your own data grid might also seem like the cheapest solution; after all, you don’t need to buy anything.</p>\n\n<p>However, there are many open source data grid components that you can get started with for free. With web application elements like a data grid component, it’s not a traditional debate of build vs. buy. For example, AG Grid offers an open source, free community edition that can be used in commercial projects. In fact, that’s what <a href=\"https://blog.ag-grid.com/prisma-io-case-study/\">Prisma</a> chose after outgrowing their homespun solution.</p>\n\n<p>If you find yourself in need of the more powerful features of AG Grid Enterprise, a paid product, it’s available and fully supported. It’s also important to consider that even a paid product may be cheaper when you factor in opportunity cost. Every hour your team spends on making your own data grid component is an hour they could be spending on something else. How much are your software devs worth per hour?</p>\n\n<p>The costs don’t end when you finish building your own data grid component, even if you never add another feature. Fixing bugs and keeping the software up-to-date will keep your team busy for years. Imagine if a browser update breaks your data grid and your team has to drop all its other projects to fix it.</p>\n\n<p><a href=\"https://hbr.org/2021/12/when-should-your-company-develop-its-own-software\">Business consultant Robert Sher wrote in <em>Harvard Business Review</em></a>, “Software breaks down all the time. Hackers continually find new attack vectors. New needs pop up and users demand modifications. Even programming languages age, so every five to 10 years, software may need to be rewritten. The costs keep coming.” Furthermore, <a href=\"https://www.helpnetsecurity.com/2017/07/25/application-vulnerabilities/\">an analysis of 1857 applications by security consultancy Contrast Labs</a> found that custom code accounted for 93 percent of all vulnerabilities found. The long-term costs are unpredictable, which can be much worse for your business compared to the predictable costs of an enterprise premium grid.</p>\n\n<p><a href=\"https://blog.ag-grid.com/proof-trading-case-study/\">Proof Trading</a>, a startup with the goal to revolutionize equity trading, chose to go with AG Grid for that very reason. CTO Prerak Sanghvi wrote on <a href=\"https://medium.com/prooftrading/proof-engineering-the-algorithmic-trading-platform-b9c2f195433d\">the company’s blog</a>, “AG Grid is not free, but it is affordable even for a startup like us.” The decision to use AG Grid gave his team more time to focus on what makes their own product unique and valuable.</p>\n\n<h2>\n  \n  \n  Third-Party Data Grids Offer Unparalleled Flexibility\n</h2>\n\n<p>While searching for a data grid solution, you may see many data grid components that don’t meet your visual, user experience, or feature needs. You might think that building it yourself is the only answer. But the truth is that most third-party solutions are extremely customizable.</p>\n\n<p>AG Grid <a href=\"https://blog.ag-grid.com/learn-to-customize-javascript-grid-in-less-than-10-minutes/#custom-cell-renderer\">features many ways to customize every single little detail</a>. <a href=\"https://blog.ag-grid.com/prisma-io-case-study/\">Prisma</a> found that AG Grid’s customizability allowed them to implement their own design and user-experience vision. The Prisma team customized the grid with their own cell renderers and editors, headers, and dark/light theme. Prisma also liked that they could use AG Grid <a href=\"https://blog.ag-grid.com/prisma-io-case-study/\">with their preferred state-management solution, MobX</a>.</p>\n\n<p>Proof Trading also used AG Grid’s features to meet their unique needs. As CTO Prerak Sanghvi and Designer/Developer Han Dong put it, “<a href=\"https://blog.ag-grid.com/proof-trading-case-study/\">AG Grid hands over the tools and lets the developer figure things out</a>.” Proof uses the <a href=\"https://medium.com/prooftrading/proof-engineering-the-algorithmic-trading-platform-b9c2f195433d\">AG Grid APIs to power customizations such as conditional formatting per view</a>. You can read more about Proof Trading’s customizations in Sanghvi’s blog post “<a href=\"https://medium.com/prooftrading/proof-engineering-the-algorithmic-trading-platform-b9c2f195433d\">Proof Engineering: The Algorithmic Trading Platform</a>.”</p>\n\n<p>AG Grid even offers tailored documentation for major frameworks such as <a href=\"https://ag-grid.com/react-data-grid/\">React</a>, <a href=\"https://ag-grid.com/angular-data-grid/\">Angular</a>, and <a href=\"https://ag-grid.com/vue-data-grid/\">Vue</a>, as well as <a href=\"https://ag-grid.com/javascript-data-grid/\">vanilla JavaScript</a>.</p>\n\n<p>For React, AG Grid’s <a href=\"https://blog.ag-grid.com/learn-to-customize-javascript-grid-in-less-than-10-minutes/#custom-cell-renderer\">React cell renderers</a> not only provide customizability but also work seamlessly with React components. This makes it easier for React developers to learn, and even to reuse the code if they happen to choose another data grid library.</p>\n\n<p>Choosing a third-party data grid component doesn’t mean sacrificing flexibility. The APIs and documentation of a good third-party data grid component can actually empower your team to implement their vision without having to worry about building an entire data grid from scratch.</p>\n\n<h2>\n  \n  \n  Using a Third Party Data Grid Sets Your Product Up for Long-Term Success\n</h2>\n\n<p>When it comes to the long term, a third-party grid offers huge advantages in sustainability and reliability. Custom code written from scratch can be very difficult to maintain. In comparison, third-party data grid components like AG Grid have the backing of a full-time team that produces bug fixes, updates, and documentation so you don’t have to.</p>\n\n<p>Adobe CTO Wouter Van Geluwe wrote in a blog post titled “<a href=\"https://medium.com/adobetech/when-to-build-vs-buy-enterprise-platform-risks-benefits-and-considerations-fea358449b30\">When to Build vs. Buy Enterprise Platform: Risks, Benefits, and Considerations</a>,” “It’s unsettlingly common for companies to be left with unusable code bases created by developers who no longer work at the company, adding an ongoing maintenance cost of hiring new developers to rebuild the codebase from scratch.”</p>\n\n<p>Is a grid part of your business value? If so, it might make sense to spend the substantial time and money required to develop your own dedicated team. Otherwise, it may make more sense to choose a product that already has a team with deep expertise.</p>\n\n<p>AG Grid has not only a development team devoted to their data grid product but also a full-time support team. <a href=\"https://blog.ag-grid.com/proof-trading-case-study/\">Proof Trading said they contacted support a few times for technical topics and general design</a> and found the team responsive and very knowledgeable.</p>\n\n<p>Another advantage in choosing a third-party data grid component is professionally produced documentation. Proof Trading saw the documentation of AG Grid as a big selling point, allowing their developers to get started quickly and <a href=\"https://blog.ag-grid.com/proof-trading-case-study/\">helping them build through examples</a>.</p>\n\n<p>With a third-party data grid component, you don’t have to shoulder the burden of updates and bug fixes yourself. <a href=\"https://blog.ag-grid.com/prisma-io-case-study/\">The Prisma team says they haven’t touched</a> AG Grid’s basic setup in nearly two years, and “it continues to just work.”</p>\n\n<p>The other bonus to a third-party data grid component is the developer ecosystem surrounding it. For example, <a href=\"https://blog.ag-grid.com/adaptable-tools-demo-and-interview/\">Adaptable Tools</a> is an extension library offering additional features like configurable dashboards and alerts for data changes.</p>\n\n<p>For long-term success, a third-party data grid component with its own team behind it will leave you with more support, better development experience, and less time and energy spent on updates.</p>\n\n<h2>\n  \n  \n  Third-Party Data Grids Enable Scaling\n</h2>\n\n<p>A home-rolled grid might work well for one hundred or even ten thousand rows, but what happens when you get to one hundred thousand or even a million rows? A DIY data grid component will struggle to handle large amounts of data, if it even loads at all. Many times, when confronted with a massive amount of data in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a>, browsers just freeze or crash.</p>\n\n<p>In contrast, professionally produced third-party data grid components like AG Grid can handle massive data sets with ease. <a href=\"https://blog.ag-grid.com/proof-trading-case-study/\">Proof Trading</a> found that many other grids couldn’t handle their five hundred thousand rows, but AG Grid could.</p>\n\n<p>AG Grid has built-in row virtualization, meaning it only adds rows that are displayed to the DOM. The rest are maintained in memory and only added to the DOM when needed. Perhaps you work with a truly massive amount of data. AG Grid Enterprise has a solution for that too—their <a href=\"https://www.ag-grid.com/javascript-data-grid/server-side-model/\">server-side row models</a> pull data from the server only as required. Such a high-performance feature would be costly to build in-house.</p>\n\n<p>Growing businesses means growing data sets. If you want to be able to add data without worries, choose a third-party data grid like AG Grid, which was built to perform just as well with a million rows as it does with ten.</p>\n\n<h2>\n  \n  \n  A Third Party Data Grid Component Is the Best Choice\n</h2>\n\n<p>When it comes to data grids, going with a third party gives you a customizable, flexible, and affordable solution that saves your team time and sets you up for long-term success. With few exceptions, a third-party data grid component is the way to go.</p>\n\n<p>If you’re looking for a high-performance third-party data grid component with a full team’s expertise behind it, check out our own product, AG Grid. With the Community Edition, you can try it for free and rapidly prototype your data grid, enabling you to get feedback and deliver your product faster. There’s nothing to lose.</p>\n\n",
      "category": "misc"
  },
  {
      "title": "AG Grid Community Update June 2022",
      "creator": "Alan Richardson",
      "pubDate": "2022-07-06T13:10:09.000Z",
      "link": "https://dev.to/ag-grid/ag-grid-community-update-june-2022-19c7",
      "guid": "https://dev.to/ag-grid/ag-grid-community-update-june-2022-19c7",
      "description": "<p>How was your June? AG Grid managed to spend a lot of time at conferences and we wrote up some experience reports.</p>\n\n<ul>\n<li><a href=\"https://blog.ag-grid.com/angular-kenya-meetup/\">Angular Kenya Meetup</a></li>\n<li><a href=\"https://blog.ag-grid.com/js-nation-and-react-summit-june-2022-overview/\">JS Nation and React Summit</a></li>\n<li><a href=\"https://blog.ag-grid.com/geekle-react-global-summit-2022-overview/\">Geekle React Global Summit</a></li>\n<li><a href=\"https://blog.ag-grid.com/reactathon-react-in-the-park-may-2022/\">Reactathon - React in the park</a></li>\n</ul>\n\n<p>All the blogs have links to recordings and selected talks.</p>\n\n<p>And if you are interested in getting hands on with AG Grid we presented two workshops at the conferences, video recording and code links are below.</p>\n\n<ul>\n<li>\n<a href=\"https://portal.gitnation.org/contents/hands-on-with-ag-grids-react-data-grid\">Getting Started with AG Grid in React</a> from Sean Landsman (<a href=\"https://github.com/seanlandsman/ag-grid-react-jsnation\">github code</a>)</li>\n<li>\n<a href=\"https://portal.gitnation.org/contents/get-started-with-ag-grid-angular-data-grid\">Getting Started with AG Grid in Angular</a> from Stephen Cooper (<a href=\"https://github.com/StephenCooper/ag-grid-angular-jsnation\">github code</a>)</li>\n</ul>\n\n<p>We also had fun by releasing our first music video. It was actually created by Samantha from Angular Nation but features the AG Grid team dancing with our CEO Niall Crosby doing the bulk of the dancing on behalf of AG Grid.</p>\n\n<ul>\n<li><a href=\"https://blog.ag-grid.com/angular-nations-ag-grid-music-video/\">You can find the story behind the video in this blog post</a></li>\n</ul>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/OhScHn9fOVw\">\n</iframe>\n </p>\n\n<h2>\n  \n  \n  On The AG Grid Blog\n</h2>\n\n<p>What else is new on the AG Grid blog?</p>\n\n<p><a href=\"https://blog.ag-grid.com/how-to-evaluate-a-javascript-data-grid/\">How to Evaluate a Javascript Data Grid</a> provides some suggestions for evaluating a data grid based on our experience and from case studies we've gathered from customers. When putting the post together I was surprised to see so many jobs advertising AG Grid as a key skill so I added that as one of the evaluation criteria, after all, you want to know if you can hire experienced staff when you choose a component.</p>\n\n<p><a href=\"https://blog.ag-grid.com/styling-react-data-grid-with-custom-css-styles/\">Styling AG Grid with Custom CSS</a> explains some of the ways of using CSS to style the grid. We have another post about themes coming up. And in our new release of AG Grid we've extended styling capabilities even further by allowing use of <a href=\"https://www.ag-grid.com/react-data-grid/global-style-customisation-variables/\">CSS Variables when creating themes</a>.</p>\n\n<p><a href=\"https://blog.ag-grid.com/headless-react-table-vs-ag-grid-react-data-grid/\">Headless React Table Compared with AG Grid</a> compares AG Grid with React Table and has Storybook examples for the different features compared. We are big fans of React Table so the post above is a comparison, not a hit piece.</p>\n\n<p>Both the \"headless\" and the \"evaluation\" posts are a result of us being aware that different projects have different needs. Some projects want to build their own GUI for the grid, in which case React Table is a good choice. Other teams want more features out of the box, in which case AG Grid is a good fit.</p>\n\n<p>In fact, we've teamed up with <a href=\"https://tanstack.com/\">Tanner Linsley</a> to try and improve the quality of all data grid offerings available and help people understand which technology fits each project most effectively. <a href=\"https://tanstack.com/blog/ag-grid-partnership\">Tanner wrote about this partnership on his site</a>.</p>\n\n<p>Our new version of AG Grid has some major changes for Angular around Generics and using the Ivy Distribution format. This requires some changes for <a href=\"https://blog.ag-grid.com/upcoming-changes-to-ag-grid-angular-in-v28/\">older versions of Angular which you can read about in this blog post</a>.</p>\n\n<p>Stephen Cooper made an appearance on <a href=\"https://blog.ag-grid.com/ag-grid-on-the-angular-plus-show-podcast/\">The Angular Plus Podcast</a> and we've summarised the podcast in the linked blog post.</p>\n\n<h2>\n  \n  \n  Community Updates\n</h2>\n\n<p>But it wasn't just AG Grid that was busy, we found a lot of community content related to AG Grid as well.</p>\n\n<ul>\n<li>New <a href=\"https://www.youtube.com/watch?v=_eOYHBGS_vU\">video from Philip Eschenbacher</a> showing live realtime updates from a MondoDB database in AG Grid.</li>\n<li>AdapTable tools released an <a href=\"https://www.youtube.com/watch?v=ISp8LKMx9vA\">overview video of their AG Grid extension component</a> with all the new features they've added. A great example of how customisable AG Grid is.</li>\n</ul>\n\n<h2>\n  \n  \n  Community Projects\n</h2>\n\n<p>We also found a tonne of projects using AG Grid out on Github so it might be worth diving into the code and seeing if you can learn something.</p>\n\n<ul>\n<li>\n<a href=\"https://trafficcontrol.apache.org/\">Apache Traffic Control</a> is migrating many of the data tables on their front end to use AG Grid.</li>\n<li>The <a href=\"https://github.com/vegaprotocol/frontend-monorepo\">vega blockchain protocol tool uses AG Grid in its frontend</a>.</li>\n<li>Hoist is a <a href=\"https://github.com/xh/hoist-react\">framework for rapid application development</a>\n</li>\n<li>The <a href=\"https://github.com/bloom-housing/bloom\">Bloom Affordable Housing System</a> uses AG Grid on the front end for filterable data tables.</li>\n<li>The <a href=\"https://github.com/ome\">Open Microscopy Environment</a> uses AG Grid in its <a href=\"https://github.com/ome/omero_search_engine\">Search Engine GUI</a>\n</li>\n<li>\n<a href=\"https://github.com/Talend/ui/\">Talend UI Components</a> have some <a href=\"http://talend.surge.sh/datagrid/?path=/story/datagrid-component--default\">Storybook examples covering their extensions for AG Grid</a>\n</li>\n</ul>\n\n<p>Plenty of stuff there to dig into.</p>\n\n",
      "category": "aggrid"
  },
  {
      "title": "What's new in AG Grid 28",
      "creator": "Alan Richardson",
      "pubDate": "2022-07-06T07:43:58.000Z",
      "link": "https://dev.to/ag-grid/whats-new-in-ag-grid-28-52op",
      "guid": "https://dev.to/ag-grid/whats-new-in-ag-grid-28-52op",
      "description": "<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wLlB3sKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/Whats-new-v28.0-1.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wLlB3sKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/Whats-new-v28.0-1.png\" alt=\"What's new in AG Grid 28\" width=\"688\" height=\"400\"></a></p>\n\n<p>AG Grid 28 is a major version with many new features - <a href=\"https://www.ag-grid.com/angular-data-grid/angular-compatibility/#ag-grid-legacy\">full Angular Ivy support</a>, sticky group rows, column headers with word wrapping, theming using CSS variables, exporting row groups to Excel as expandable/collapsible and many more.</p>\n\n<p>As this is a major versions, we've deprecated certain API members as part of these updates. We recommend reviewing the list of deprecations and breaking changes in the <a href=\"https://www.ag-grid.com/changelog/?fixVersion=28.0.0\">release notes</a> when planning to update to this version.</p>\n\n<p>Please see the full list of changes <a href=\"https://www.ag-grid.com/ag-grid-changelog/?fixVersion=28.0.0\">in our changelog</a>.</p>\n\n<h2>\n  \n  \n  Themes using CSS Variables\n</h2>\n\n<p>In AG Grid 28 we’ve significantly <a href=\"https://www.ag-grid.com/react-data-grid/themes/\">enhanced theming capabilities</a> by porting our grid layout system to use CSS variables. AG Grid 27 and earlier used Sass.</p>\n\n<p>Your existing themes won’t break when you upgrade to AG Grid 28 as <a href=\"https://www.ag-grid.com/javascript-data-grid/global-style-upgrading-to-v28/\">explained here</a>. However, you will only be able to use the new styling capabilities if you rebuild your themes using the new themes using <a href=\"https://www.ag-grid.com/react-data-grid/global-style-customisation-variables/\">AG Grid CSS Variables</a>.</p>\n\n<h2>\n  \n  \n  Support for Typescript generics for row data and cell values\n</h2>\n\n<p>AG Grid 28 adds support for <a href=\"https://www.ag-grid.com/react-data-grid/typescript-generics/\">Typescript Generics</a>for row data and cell values. This greatly improves the developer experience via code completion and compile time validation of row data and cell value properties.</p>\n\n<h2>\n  \n  \n  Sticky group rows\n</h2>\n\n<p>Sticky group rows displays the expanded group rows at the top of the viewport while scrolling through the row group child rows. When you <a href=\"https://www.ag-grid.com/javascript-data-grid/grouping-sticky-groups/\">enable sticky groups</a>users will always know which group's rows they're scrolling through as shown below:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--deUvjYqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/sticky_group_rows.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--deUvjYqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/sticky_group_rows.gif\" alt=\"What's new in AG Grid 28\" width=\"731\" height=\"568\"></a></p>\n\n<h2>\n  \n  \n  Sorting group columns separately\n</h2>\n\n<p>You can now set the sort direction of different group columns separately by clicking the <a href=\"https://www.ag-grid.com/javascript-data-grid/grouping-group-panel/#example-row-group-panel\">group column items in the group panel</a> and the columns tool panel as shown in the GIF below. This allows users more flexibility in the way they work with the data.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yhCL_Ogw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/rowgroup_sorting.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yhCL_Ogw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/rowgroup_sorting.gif\" alt=\"What's new in AG Grid 28\" width=\"731\" height=\"568\"></a></p>\n\n<h2>\n  \n  \n  Server-side row model\n</h2>\n\n<p>AG Grid 28 allows to preserve row group expanded state when performing a refresh when using infinite scrolling. See this <a href=\"https://www.ag-grid.com/javascript-data-grid/server-side-model-refresh/#example-keep-group-state-infinite\">demonstrated here</a>.</p>\n\n<p>Also, AG Grid now allows server-side <a href=\"https://www.ag-grid.com/javascript-data-grid/server-side-model-sorting/#top\">sorting</a>and <a href=\"https://www.ag-grid.com/javascript-data-grid/server-side-model-filtering/\">filtering</a>when not using infinite scrolling. This way you can now use <a href=\"https://www.ag-grid.com/javascript-data-grid/server-side-model-filtering/#example-group-filter-server-side-force\">server-side filtering to avoid empty row groups</a>while using the advantages of the server-side row model which retrieves all records for a level by default.</p>\n\n<h2>\n  \n  \n  Column Headers Word Wrapping\n</h2>\n\n<p>The column header row can have its height set automatically based on the content of the header cells. When you activate <a href=\"https://www.ag-grid.com/javascript-data-grid/column-headers/#auto-header-height\">column header auto height</a>, you the column header text will wrap on multiple lines and the column header row will size itself automatically, as shown below:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZnapUuQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/column_header_wrap.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZnapUuQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/column_header_wrap.gif\" alt=\"What's new in AG Grid 28\" width=\"731\" height=\"568\"></a></p>\n\n<h2>\n  \n  \n  Allow de-selecting cells from the selected cell range\n</h2>\n\n<p>You can <a href=\"https://www.ag-grid.com/javascript-data-grid/range-selection/#range-deselection\">deselect cells from of existing selected cell ranges</a>by holding CTRL key pressed and clicking or dragging across selected cells as shown below:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--p2P2WlX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/range_deselection.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--p2P2WlX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/range_deselection.gif\" alt=\"What's new in AG Grid 28\" width=\"731\" height=\"568\"></a></p>\n\n<h2>\n  \n  \n  Export row groups/tree data rows to Excel as expandable row groups\n</h2>\n\n<p>Row groups and tree data rows in AG Grid are now exported as <a href=\"https://www.ag-grid.com/javascript-data-grid/excel-export/\">row groups in Excel</a>. This allows you to expand/collapse the different group levels in Excel just like in AG Grid itself as shown below:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iu8_yWqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/expand_collapse_row_groups.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iu8_yWqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/07/expand_collapse_row_groups.gif\" alt=\"What's new in AG Grid 28\" width=\"731\" height=\"568\"></a></p>\n\n<h2>\n  \n  \n  Charts\n</h2>\n\n<p>As part of AG Grid 28 we've improved the following chart features:</p>\n\n<ul>\n<li>Improved tooltip rendering performance when showing lots of data</li>\n<li>Added <a href=\"https://www.ag-grid.com/javascript-charts/bar-series/\">Bar/Column series</a> support for numeric/time axes allowing to use a column chart to plot time series data</li>\n<li>Added legend item label max length setting, ensuring that long series labels are handled properly</li>\n</ul>\n\n<h2>\n  \n  \n  Summary\n</h2>\n\n<p>AG Grid 28 is a major step forward in terms of end-user functionality as well as developer productivity. It adds major improvements across row grouping, server-side row model, theming and developer productivity.</p>\n\n<p>We recommend reviewing the list of deprecations and breaking changes in the <a href=\"https://www.ag-grid.com/changelog/?fixVersion=28.0.0\">release notes</a> when planning to update to this version. Please see the full list of changes <a href=\"https://www.ag-grid.com/ag-grid-changelog/?fixVersion=28.0.0\">in our changelog</a>.</p>\n\n<p>As always, we’re keen to help you upgrade and to hear your feedback.</p>\n\n<p>Happy coding!</p>\n\n",
      "category": "aggrid"
  },
  {
      "title": "Angular Kenya Meetup",
      "creator": "Alan Richardson",
      "pubDate": "2022-06-29T14:57:42.000Z",
      "link": "https://dev.to/ag-grid/angular-kenya-meetup-34lh",
      "guid": "https://dev.to/ag-grid/angular-kenya-meetup-34lh",
      "description": "<p>Stephen Cooper presented at the Angular Kenya Meetup on June 23 2022. Explaining lessons learned from building components that are used by other people when they have template type checking enabled.</p>\n\n<p>This allows IDEs to warn about type errors as we are coding to get early pre-compile time warnings.</p>\n\n<p>With strict mode enabled by default, we must acknowledge that there is nothing more tiresome than using a component that is poorly typed. As we develop our components we must consider the implications of our Input types for developers that have strict mode enabled.</p>\n\n<p>Just defining the Input types isn't enough to avoid type failures.</p>\n\n<p>If you want to support shorthand boolean attributes then a declaration can't just be boolean.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>public disabled: boolean = false;\n\n</code></pre>\n\n</div>\n\n\n\n<p>Explicit attribute binding will work:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;app-display [disabled]=\"true\"&gt;&lt;/app-display&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>But when someone uses a plain attribute, it doesn't work because the default is equivalent to an empty string.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;app-display disabled&gt;&lt;/app-display&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>This would generate a visual warning in the IDE because the types don't match and a \"Type 'string' is not assignable to type 'boolean'.\"</p>\n\n<p>There are two approaches to handling this depending upon the Angular/Typescript version.</p>\n\n<p>In Angular v9-14 we can use <code>ngAcceptInputType_</code> for Input Coercion, or we use Set and Get with different types for Typescript v4.3 and Angular v13+.</p>\n\n<p><code>ngAcceptInputType_</code> is a static property supported by the Angular compiler that enables you to widen the accepted types of an input property.</p>\n\n<p>The input is defined the normal way, but we also add a static <code>ngAcceptInputType_</code> property to allow the compiler to accept multiple types.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>@Input()\npublic disabled: boolean = false;\nstatic ngAcceptInputType_disabled: boolean | '';\n\n</code></pre>\n\n</div>\n\n\n\n<p>But we still have to convert the empty string to true, using <code>ngOnchanges</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>ngOnChanges (changes: SimpleChanges) {\n   if (changes.disabled) {\n       this. disabled = toBoolean(changes.disabled.currentValue);\n   }\n}\n\ntoBoolean (value: boolean | string) {\n    this.disabled = (value === '') || value === true;\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>This can be done for other types as well, e.g. Dates:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>@Input ()\npublic date: Date;\nstatic ngAcceptInputType_date: Date | string;\n\nngOnChanges (changes: SimpleChanges) {\n    if (changes.date) {\n        this.date = toDate(changes.date.currentValue);\n    }\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>However, will Inputs be set with the async pipe? Do you handle the initial null values?</p>\n\n<p>e.g. if the user is setting the <code>disabled</code> value from an Observable stream<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>disabledStream$: Observable&lt;boolean&gt;;\n\n</code></pre>\n\n</div>\n\n\n\n<p>And:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;app-display [disabled]=\"disabledStream$ | async\"&gt;&lt;/app-display&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>An Async pipe returns null when no values have been emitted yet.</p>\n\n<p>We would amend the <code>ngAcceptInputType_</code> to handle null.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>static ngAcceptInputType_disabled: boolean | '' | null;\n\n</code></pre>\n\n</div>\n\n\n\n<p>With Typescript 4.3 we can now use Get and Set with different types.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>_disabled: boolean = false;\n\n@Input()\nget disabled(): boolean{\n   return this._disabled;\n}\n\nset disabled(value: boolean | string | null){\n   this._disabled = toBoolean(value);\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>With no need any more for <code>ngAcceptInputType_</code>.</p>\n\n<p>We can also handle compilation failures for 3rd party components in our code:</p>\n\n<p>Non null assertions with \"!\":<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;app-display [disabled]=\"(disabledStream$ | async)!\"&gt;&lt;/app-display&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>Disable type checking with \"$any()\":<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;app-display [disabled]=\"$any(disabledStream$ | async)\"&gt;&lt;/app-display&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>Provide a default value \"|| false\":<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;app-display [disabled]=\"(disabledStream$ | async) || false\"&gt;&lt;/app-display&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>It is also possible to configure the Angular Compiler options to switch off various checks.</p>\n\n<p>e.g.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\"angularCompilerOptions\": { \"strictNullInputTypes\": false}\n\n</code></pre>\n\n</div>\n\n\n\n<p>These are detailed in the Angular documentation - <a href=\"https://angular.io/guide/template-typecheck#troubleshooting-template-errors\">Template Type Checking</a>.</p>\n\n<p>The talk recording demonstrates the use cases for <code>ngAcceptInputType</code> and Set/Get, along with Input coercion, drawing from the experience of preparing the \"ag-grid-angular\" for use in strict applications.</p>\n\n<p>Additionally the talk goes further and explains the user of generics.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export class GenericComponent&lt;TData&gt;{\n    @Input()\n    rowData: TData[] | undefined;\n\n    @Output ()\n    rowDataUpdated = new EventEmitter&lt;TData]&gt;();\n}\n\n</code></pre>\n\n</div>\n\n\n\n<p>Then:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>rowData: number[] = [];\nonRowDataUpdate (event: string[]) {}\n\n</code></pre>\n\n</div>\n\n\n\n<p>And:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;app-generic\n    [rowData]=\"rowData\"\n    (rowDataUpdated)=\"onRowDataUpdate($event)\"&gt;\n&lt;/app-generic&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>As Inputs are a fundamental part of Angular this will impact every developer once their application enables strict mode. I would hate for developers to resort to any when there are Angular features to maintain fully typed components.</p>\n\n<p>There is also an extended Q&amp;A Session in the video.</p>\n\n<h2>\n  \n  \n  Code\n</h2>\n\n<p>Code examples for writing Angular Components that are compliant with Typescript strict mode. Two sample apps for the approaches described under <a href=\"https://angular.io/guide/template-typecheck#troubleshooting-template-errors\">Template Type Checking</a>.</p>\n\n<ul>\n<li>GitHub Repo: <a href=\"https://github.com/StephenCooper/StrictAngularComponents\">https://github.com/StephenCooper/StrictAngularComponents</a>\n</li>\n</ul>\n\n<p>In both demos you will see compilation errors when running <code>npm run start</code> as Stephen has left examples that need fixing following the approaches outlined.</p>\n\n<h2>\n  \n  \n  Related Reading\n</h2>\n\n<ul>\n<li>Angular Template Type Checking Docs: <a href=\"https://angular.io/guide/template-typecheck#template-type-checking\">https://angular.io/guide/template-typecheck#template-type-checking</a>\n</li>\n</ul>\n\n<h2>\n  \n  \n  Slides\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gkizZhV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/StrictCompsStephenAnim.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gkizZhV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/StrictCompsStephenAnim.gif\" alt=\"Angular Kenya Meetup\" width=\"480\" height=\"270\"></a></p>\n\n<p><a href=\"https://drive.google.com/file/d/1JW84dsgh1xDSgMqGEIjkhkCHAWenFCw3/view?usp=sharing\">Download pdf of the slides</a></p>\n\n<h2>\n  \n  \n  Talk Recording\n</h2>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/5a2YKmVzMBM\">\n</iframe>\n</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=5a2YKmVzMBM\">Watch On YouTube</a></p>\n\n",
      "category": "angular"
  },
  {
      "title": "JS Nation and React Summit June 2022 Overview",
      "creator": "Alan Richardson",
      "pubDate": "2022-06-28T11:32:54.000Z",
      "link": "https://dev.to/ag-grid/js-nation-and-react-summit-june-2022-overview-jdf",
      "guid": "https://dev.to/ag-grid/js-nation-and-react-summit-june-2022-overview-jdf",
      "description": "<p>June was a busy month for the AG Grid team as we were sponsoring <a href=\"https://jsnation.com/\">JS Nation</a> and <a href=\"https://reactsummit.com/\">React Summit</a>.</p>\n\n<p><a href=\"https://twitter.com/i/events/1541738223864520704\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QW4Y0cYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/ag-grid-at-js-nation-react-summit-tiny.png\" alt=\"JS Nation and React Summit June 2022 Overview\" width=\"800\" height=\"450\"></a></p>\n\n<h2>\n  \n  \n  JS Nation\n</h2>\n\n<p><a href=\"https://twitter.com/niallcrosby/status/1537424444007800837\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--v6Cnfqs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/stephen-js-nation--1-.jpeg\" alt=\"JS Nation and React Summit June 2022 Overview\" width=\"680\" height=\"510\"></a></p>\n\n<p>Stephen Cooper spoke at JS Nation to provide an overview of how we automatically generate runnable examples for our website for all supported frameworks and variants... from one example. And the examples on our site all use the specific framework nuances and best practices.</p>\n\n<blockquote>\n<p>At AG Grid, we maintain thousands of code demos, with the same demo in Angular, React, Vue, and Vanilla JS. Additionally, each framework has different variations covering JavaScript, TypeScript, Modules, Packages, Hooks, Classes, Vue 2, and Vue 3. How do we do it? We automate. This session will explain how we start with a single TypeScript version and automatically convert it to every combination we need and finally use Cypress to test the converted example.</p>\n</blockquote>\n\n<ul>\n<li><a href=\"https://portal.gitnation.org/contents/automatically-maintaining-thousands-of-code-demos-across-multiple-framework-variations\">Watch Stephen's talk on the Gitnation Portal</a></li>\n</ul>\n\n<p>Stephen's Talk is also available on YouTube:</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/kOwAjLgSY14\">\n</iframe>\n</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=kOwAjLgSY14\">Watch On YouTube</a></p>\n\n<p>Stephen also provided a workshop on Getting Started with AG Grid in Angular. Which will be available to watch soon.</p>\n\n<p>The code for Stephen's workshop is available now:</p>\n\n<ul>\n<li><a href=\"https://github.com/StephenCooper/ag-grid-angular-jsnation\">github.com/StephenCooper/ag-grid-angular-jsnation</a></li>\n</ul>\n\n<h2>\n  \n  \n  React Summit\n</h2>\n\n<p><a href=\"https://twitter.com/niallcrosby/status/1537788952572317699\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AntscxnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/niall-react-summit.jpeg\" alt=\"JS Nation and React Summit June 2022 Overview\" width=\"680\" height=\"510\"></a></p>\n\n<p>Sean Landsman provided a workshop for the React Summit showing how to Get Started with AG Grid in React.</p>\n\n<p>The code for Sean's workshop is available on Github:</p>\n\n<ul>\n<li><a href=\"https://github.com/seanlandsman/ag-grid-react-jsnation\">github.com/seanlandsman/ag-grid-react-jsnation</a></li>\n</ul>\n\n<p>Niall presented at the React Summit on the new React Rendering Engine for AG Grid.</p>\n\n<blockquote>\n<p>Recently the AG Grid team redesigned the grid to implement the React Rendering Engine in 100% React code. Given the complexity of a datagrid, this was a very challenging task. Hear from Niall, the founder of AG Grid, about the journey of this migration including how this was achieved, lessons learned along the way, and how it will impact your React applications using AG Grid.</p>\n</blockquote>\n\n<ul>\n<li><a href=\"https://portal.gitnation.org/contents/ag-grids-new-react-rendering-engine\">Watch the talk on the Gitnation Portal</a></li>\n</ul>\n\n<p>Niall's talk is also available on YouTube:</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/AsaR0wyR9c0\">\n</iframe>\n</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=AsaR0wyR9c0\">Watch On YouTube</a></p>\n\n<p>Tanner Linsley presented on 5 Years of Building React Table.</p>\n\n<ul>\n<li><a href=\"https://portal.gitnation.org/contents/5-years-of-building-react-table\">Watch the recording of Tanner's talk on the Gitnation Portal</a></li>\n</ul>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/O4IWJcafX8c\">\n</iframe>\n</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=O4IWJcafX8c\">Watch On YouTube</a></p>\n\n<p>React Table and AG Grid are often viewed as competitors but we provide completely different solutions for different environments. We recognise each other as best of breed offerings, if you are looking for a headless multi-framework open source table then we recommend <a href=\"https://tanstack.com/table\">Tanstack Table</a>. And if you are looking for a 'batteries included', fully featured out of the box Data Grid then use AG Grid.</p>\n\n<p>By the way Tanstack and AG Grid are open source partners. AG Grid started as an Open Source project and the Community Edition remains a free to use, MIT Licensed Open Source Project.</p>\n\n<p>Read what Tanner has to say about <a href=\"https://tanstack.com/blog/ag-grid-partnership\">AG Grid's Open Source Partnership on his blog</a></p>\n\n\n\n\n<p>Both AG Grid workshops will be available for free on the GithNation portal site:</p>\n\n<ul>\n<li><a href=\"https://portal.gitnation.org/workshops\">https://portal.gitnation.org/workshops</a></li>\n</ul>\n\n<p>It is possible to catchup with all talks from both conferences on the GitNation Portal Site, and with selected talks on the YouTube channels:</p>\n\n<ul>\n<li>JS Nation <a href=\"https://portal.gitnation.org/events/jsnation-2022\">Gitnation Portal</a> and <a href=\"https://www.youtube.com/c/JSNation/videos\">JS Nation YouTube</a>\n</li>\n<li>React Summit <a href=\"https://portal.gitnation.org/events/react-summit-2022\">Gitnation Portal</a> and <a href=\"https://www.youtube.com/c/ReactConferences/videos\">React Youtube Videos</a>\n</li>\n</ul>\n\n",
      "category": "aggrid"
  },
  {
      "title": "How to evaluate a Javascript Data Grid",
      "creator": "Alan Richardson",
      "pubDate": "2022-06-27T13:20:48.000Z",
      "link": "https://dev.to/ag-grid/how-to-evaluate-a-javascript-data-grid-1f0b",
      "guid": "https://dev.to/ag-grid/how-to-evaluate-a-javascript-data-grid-1f0b",
      "description": "<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WJf2iClb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/how-to-evaluate-a-data-grid-tiny.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WJf2iClb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ag-grid.com/content/images/2022/06/how-to-evaluate-a-data-grid-tiny.png\" alt=\"How to evaluate a Javascript Data Grid\" width=\"688\" height=\"400\"></a></p>\n\n<p>What do we do when hunting for a new component to meet a specific need? How do we answer the question \"What is the best Data Grid?\"</p>\n\n<p>For a specific framework, we could 'Ask Google': \"What is the best React Data Grid?\" and in response, we will see many listicle articles.</p>\n\n<p>But 'best' needs to consider your specific needs, and no listicle article can do that.</p>\n\n<p>For example:</p>\n\n<ul>\n<li>What is your budget?</li>\n<li>What is your team's skill level?</li>\n<li>Do you want a Data Grid or an entire component suite?</li>\n<li>Are you looking for enterprise-level support?</li>\n<li>Do you need multi-framework support?</li>\n<li>etc.</li>\n</ul>\n\n<p>The only way to decide the \"best data grid\" for your environment is to evaluate the options.</p>\n\n<p>We've put together this list of points as a starting guide for how to evaluate a Data Grid. You can answer many of these points just by reviewing the website and examples of the product:</p>\n\n<ul>\n<li>Could you build your own?</li>\n<li>What essential features do you need immediately?</li>\n<li>What features will you need in the future when your product takes off?</li>\n<li>Do you need High-Frequency Updates?</li>\n<li>Do you need to customize the data grid?</li>\n<li>Does your user need to customize the data grid?</li>\n<li>What is the product documentation like?</li>\n<li>How easy will it be to hire staff?</li>\n<li>How popular and widely used is the data grid?</li>\n<li>Is commercial and enterprise support available?</li>\n<li>Is the data grid supported and updated?</li>\n<li>Can you evaluate freely?</li>\n<li>Can you review the Data Grid source code?</li>\n<li>Is there a free version available for commercial use?</li>\n<li>How easy is it to get started?</li>\n</ul>\n\n<p>We've supplied some answers below to cover AG Grid and feel free to use this as a basis to compare AG Grid with our competitors to see which Data Grid works best for you. We believe AG Grid will be the best for most use-cases, but we know that different teams prioritize different features and options.</p>\n\n<h2>\n  \n  \n  Could you build your own?\n</h2>\n\n<p>Choosing any component can be tricky. It's often tempting to build custom components iteratively, but the feature set you need becomes too much to code on your own at some point.</p>\n\n<p>Considering what features you'll want the component to provide your users ultimately gives you a good starting point for reviewing the component marketplace.</p>\n\n<p>Creating a simple table with sorting and filtering won't take too much time, but it will still be longer than adding an existing Data Grid as a dependency and enabling a few properties.</p>\n\n<p>Make sure you consider the future needs of your project and estimate how long it will take to create more advanced features like pivoting and grouping by rows and columns. The complexity increases if you want user control over those features and not just set them up in advance in code.</p>\n\n<h3>\n  \n  \n  Don't start from scratch - go headless\n</h3>\n\n<p>If you do decide to build your own regardless, we'd still recommend you don't. AG Grid comes fully featured and will save you a lot of time.</p>\n\n<p>Still, if you are determined, then we recommend looking at a Headless component like the <a href=\"https://tanstack.com/table\">Tanstack Table</a>, previously known as React Table before it supported multiple frameworks.</p>\n\n<p>Tanstack Table is headless, so you still have to write the code to create the GUI, but the component handles the underlying functionality, like sorting. We have a blog post showing the difference in the amount of code required to use a <a href=\"https://blog.ag-grid.com/headless-react-table-vs-ag-grid-react-data-grid/\">Headless Component versus a fully featured Data Grid like AG Grid</a>.</p>\n\n<h2>\n  \n  \n  What essential features do you need immediately?\n</h2>\n\n<p>If you decide to build your own data grid, it is crucial to consider the features you will eventually need.</p>\n\n<p>For a data grid, the initial set of features is likely to be:</p>\n\n<ul>\n<li>sorting,</li>\n<li>filtering,</li>\n<li>in cell editing,</li>\n<li>pagination and,</li>\n<li>customizing the rendering of data in the cells.</li>\n</ul>\n\n<p>This set of features won't help reduce the list of candidate components because this is the basic set of features you'd expect from any Data Grid.</p>\n\n<p>But when you estimate the time it will take you to build these features yourself, while creating and styling a GUI, then you might consider evaluating an existing Data Grid rather than spending the time coding them yourself.</p>\n\n<p>For example, you only need a few lines of code to create a basic AG Grid implementation that is editable and pulls data from an API while providing sorting, filtering, and pagination. Additionally, it can all be built in a few minutes.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    const columnDefs = [\n        {field: 'make'}, {field: 'model'},\n        {field: 'price', editable: true}\n    ];\n\n    const gridOptions = {\n        columnDefs: columnDefs, enableSorting: true,\n        enableFilter: true, pagination: true\n    };\n\n    const eGridDiv = document.querySelector('#myGrid');\n\n    new agGrid.Grid(eGridDiv, gridOptions);\n\n    fetch('https://www.ag-grid.com/example-assets/row-data.json').\n    then(function (response) {\n        return response.json();\n    }).then(function (data) {\n        gridOptions.api.setRowData(data);\n    })\n\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  What features will you need in the future when your product takes off?\n</h2>\n\n<p>Thinking through the future needs of your product can be one of the most complex parts of evaluating a component. You're often so focused on the immediate need to render data in a grid and make it user accessible that more advanced features don't come into the picture.</p>\n\n<p>Consider:</p>\n\n<ul>\n<li>Column Spanning</li>\n<li>Column Grouping</li>\n<li>Multi Level column grouping</li>\n<li>Row Spanning</li>\n<li>Row Grouping</li>\n<li>Data Aggregation when grouping</li>\n<li>Rendering Tree Data</li>\n<li>Nested Data Grids</li>\n<li>Advanced Column Filtering</li>\n<li>Pivoting</li>\n</ul>\n\n<p>We recommend reading through the component's documentation as it will trigger ideas for features you probably had not considered. The <a href=\"https://www.ag-grid.com/javascript-data-grid/getting-started/\">AG Grid documentation</a> has a sidebar where you can reveal the contents and quickly see the scope of the features available.</p>\n\n<p>For each advanced feature, you identify as helpful, try to estimate how long it would take to implement yourself. Many of the features listed above could well take months to implement the most basic implementation.</p>\n\n<p>AG Grid has been in development since 2014 with a dedicated team of professional developers who continually add new features and update the Data Grid to keep pace with the framework changes and cross-browser nuances. It can be helpful to consider adopting a third-party Data Grid component as outsourcing the development of a niche part of your product. At the same time, you focus on the functionality that adds the most business value. And if our open-source community edition can meet your application needs, then you're outsourcing the programming and maintenance of Data Grid functionality to a professional team of developers for free.</p>\n\n<h2>\n  \n  \n  Do you need High-Frequency Updates?\n</h2>\n\n<p>One of the most challenging aspects of creating a Data Grid is handling frequent updates, especially when the Data Grid is rendering a lot of data.</p>\n\n<p>The main techniques required for this are:</p>\n\n<ul>\n<li>Row virtualization</li>\n<li>Transactional Data Updates</li>\n<li>Rendering optimization</li>\n<li>Server-side Data updates</li>\n</ul>\n\n<p>Row virtualization ensures that the Data Grid only renders data visible on the screen. Various techniques are available to do this, and AG Grid has <a href=\"https://www.ag-grid.com/angular-data-grid/dom-virtualisation/\">DOM Virtualisation</a> built into both Community and Enterprise editions.</p>\n\n<p>Look for examples in the documentation for the Data Grid components to find working examples where you can see the data virtualization and updates in practice. Also, information on how to configure the data grid when it handles lots of data with frequent updates.</p>\n\n<p>For AG Grid we have:</p>\n\n<ul>\n<li><a href=\"https://www.ag-grid.com/angular-data-grid/massive-row-count/#example-viewport-big-data\">an example showing AG Grid with 1,000,000 rows in a data set</a></li>\n<li><a href=\"https://www.ag-grid.com/angular-data-grid/scrolling-performance/\">information on tweaking performance for large data sets</a></li>\n<li><a href=\"https://embed.plnkr.co/plunk/zi7m4KckOwvvpqXD?autoCloseSidebar=true&amp;show=preview\">an example showing high frequency updates when when grouping and aggregating data</a></li>\n<li>documentation and examples for update transactions for <a href=\"https://www.ag-grid.com/javascript-data-grid/data-update-transactions/\">client side</a> and <a href=\"https://www.ag-grid.com/javascript-data-grid/server-side-model-transactions/\">server side data</a>\n</li>\n<li>documentation and examples covering High Frequency updates for <a href=\"https://www.ag-grid.com/javascript-data-grid/data-update-high-frequency/\">client side</a> and <a href=\"https://www.ag-grid.com/javascript-data-grid/server-side-model-high-frequency/\">server side</a>\n</li>\n</ul>\n\n<p>High-Frequency handling of large Data Sets is often one of the main reasons for choosing AG Grid as <a href=\"https://blog.ag-grid.com/proof-trading-case-study/\">described in this customer case study with Proof Trading</a>.</p>\n\n<h2>\n  \n  \n  Do you need to customize the data grid?\n</h2>\n\n<p>Most teams immediately think of writing their own data grid because they are nervous that they will not be able to customize the Data Grid to their specifications.</p>\n\n<p>Make sure that the Data Grid you are evaluating can be easily customized.</p>\n\n<p>With AG Grid, we support customization through components written in the framework being used.</p>\n\n<p>Full <a href=\"https://www.ag-grid.com/javascript-data-grid/components/\">documentation on the types of components is available</a>. We also have an <a href=\"https://youtu.be/eglfpHRpcu0\">overview video explaining how the component customization works</a>.</p>\n\n<p>Additionally AG Grid also supports various <a href=\"https://www.ag-grid.com/javascript-data-grid/row-styles/\">CSS Styling mechanisms</a> including <a href=\"https://www.ag-grid.com/javascript-data-grid/themes/\">themes</a>.</p>\n\n<p>The customization available from AG Grid is often cited as a reason for choosing AG Grid and is covered in this <a href=\"https://blog.ag-grid.com/prisma-io-case-study/\">case study with Prisma.io</a>.</p>\n\n<p>Additionally, AG Grid is so customizable that AdapTable has built their entire business on an extension for AG Grid which relies entirely on the customisability of AG Grid, as described in this <a href=\"https://blog.ag-grid.com/adaptable-tools-demo-and-interview/\">case study interview with AdapTable's CTO</a>.</p>\n\n<h2>\n  \n  \n  Does your user need to customize the data grid?\n</h2>\n\n<p>When choosing a Data Grid, we often forget that the more customization we can put in the hands of the user when they use our product, the more it can meet their evolving needs without any additional coding effort.</p>\n\n<p>Once you put your Data Grid in the hands of users, it can be hard to predict what they will need and what subtle configuration changes they will require. Using a Data Grid that supports user configuration will save development time later because your users can configure the grid themselves.</p>\n\n<p>AG Grid's <a href=\"https://www.ag-grid.com/javascript-data-grid/component-tool-panel/#example-custom-stats\">Tool Panel</a> and support for user-controlled <a href=\"https://www.ag-grid.com/javascript-data-grid/pivoting/\">pivoting</a>, <a href=\"https://www.ag-grid.com/javascript-data-grid/column-groups/\">column grouping</a> and <a href=\"https://www.ag-grid.com/javascript-data-grid/grouping/\">row grouping</a> are some of the most obvious user customizations, and these only require a few parameters to enable.</p>\n\n<p>In addition, AG Grid Enterprise comes with <a href=\"https://www.youtube.com/watch?v=ObXdeXE9oBU\">Integrated Charting</a>, allowing users to select data and build their charts from rendered data, all without any programming involvement.</p>\n\n<h2>\n  \n  \n  What is the product documentation like?\n</h2>\n\n<p>The product documentation is essential when working with a component library. It is important to know that the team building the component care as much about the developer's experience with the documentation as they do about the component itself.</p>\n\n<p>Things to look for in the documentation:</p>\n\n<ul>\n<li>Is there a Getting Started Guide?</li>\n<li>Is there a search facility?</li>\n<li>Are there examples embedded in the documentation?</li>\n<li>Are the examples runnable in the browser?</li>\n<li>Can you amend the code and experiment with the examples in the browser?</li>\n<li>Are there any video tutorials in the documentation?</li>\n<li>Are older versions of the documentation available online?</li>\n</ul>\n\n<p>With <a href=\"https://www.ag-grid.com/javascript-data-grid/getting-started/\">the AG Grid Documentation</a>, we have all the framework documentation available by clicking the framework icon at the top right-hand corner because all Data Grid features are available in all supported frameworks.</p>\n\n<p>We use Plunker to host the examples embedded in the documentation. These examples are maintained for all frameworks and supported approaches in each framework, e.g. classes and hooks. Plunker allows us to automatically upload the examples with each release, so they are always in step with the current version. It provides an environment where you can edit and easily play with each example to try things out.</p>\n\n<p>Our older version documentation <a href=\"https://www.ag-grid.com/archive/\">is available</a> from the \"Documentation Archive\" link in the footer of the site.</p>\n\n<p>We have a blog post describing how to <a href=\"https://blog.ag-grid.com/maximise-your-productivity-with-ag-grid-documentation/\">maximize your productivity with the AG Grid documentation</a>.</p>\n\n<h2>\n  \n  \n  How easy will it be to hire staff?\n</h2>\n\n<p>When you are choosing a Data Grid for your product, it is likely to be a strategic choice, and you will need to be sure that you can hire experienced staff to work with the component choice.</p>\n\n<p>We recommend performing a job search on job hunting sites to see how many jobs are listed with the component.</p>\n\n<p>When the component is listed as a skill in job listings, it is a good indicator that the component is well used and has an active set of developers who list it as a skill. You will also gain an idea of the companies that use the component.</p>\n\n<p>Job adverts frequently list AG Grid as \"ag-grid,\" so be sure to search for variants of the component's name.</p>\n\n<h2>\n  \n  \n  How popular and widely used is the data grid?\n</h2>\n\n<p>The Job Ad search above will provide some indicators as to the popularity of the component.</p>\n\n<p>The other indicators are npm stats and Github stars.</p>\n\n<ul>\n<li>you can see <a href=\"https://www.npmtrends.com/ag-grid-angular-vs-ag-grid-community-vs-ag-grid-enterprise-vs-ag-grid-react-vs-ag-grid-vue\">AG Grid npm stats here</a>.</li>\n<li>you can also use npm trends to compare <a href=\"https://www.npmtrends.com/@glideapps/glide-data-grid-vs-ag-grid-community-vs-ag-grid-enterprise-vs-fancygrid-vs-flexmonster-vs-handsontable-vs-igniteui-react-grids\">AG Grid with other Data Grids</a>\n</li>\n</ul>\n\n<h2>\n  \n  \n  Is commercial and enterprise support available?\n</h2>\n\n<p>When building strategic and business-critical applications, you need to use components from a company that takes the component seriously.</p>\n\n<p>Some data grids are part of a large component suite; they won't be equally important to the company selling them. AG Grid only makes a data grid, it is our single focus, and all we do is continue to improve the grid.</p>\n\n<p>It's also the only thing we have to support, so we have a dedicated team that can work with customers directly for their specific use-cases.</p>\n\n<p>You never know when you will face a problem that you can't resolve internally. The documentation that supports a component is generic and won't cover every technical combination you are using on your project. You'll want to know that you have the option of contacting support and that the support team can help you work through any issue you face rather than wasting development time experimenting on your own.</p>\n\n<h2>\n  \n  \n  Is the data grid supported and updated?\n</h2>\n\n<p>If a company is serious about its component, they will continually work on it and release new versions.</p>\n\n<p>Things to look out for are the release notes on the company website and the releases that have been made through <code>npm</code> or Github.</p>\n\n<p>The AG Grid links to see how we put out releases are:</p>\n\n<ul>\n<li>\n<a href=\"https://ag-grid.com/changelog\">changelog, covering all releases and release notes</a> incidentally, this is written using AG Grid.</li>\n<li>\n<a href=\"https://ag-grid.com/pipeline/\">pipeline, describing what is coming next</a>, also written in AG Grid.</li>\n<li>our <a href=\"https://github.com/ag-grid/ag-grid/releases\">Github releases</a> are pretty detailed, so if you are signed up for notification on Github, you'll see precisely what we release and know the moment that we go live.</li>\n</ul>\n\n<h2>\n  \n  \n  Can you evaluate freely?\n</h2>\n\n<p>When choosing between components, there is nothing worse than having to sign up for a trial version or contact sales to get permission to use the component.</p>\n\n<p>Ideally, you want to be able to add it to your project using <code>npm</code> and get started on your evaluation with no limitations.</p>\n\n<p>AG Grid is a company created by developers, and we don't put any blockers on the evaluation process.</p>\n\n<p>You can get started by adding AG Grid to your project using <code>npm</code>.</p>\n\n<p>If you want to evaluate using the community edition, you can even deploy it into production because our Community edition is MIT Licensed and free to use with no restrictions on production usage.</p>\n\n<p>This is one of the reasons that <a href=\"https://blog.ag-grid.com/prisma-io-case-study/\">Prisma.io adopted AG Grid Community Edition in their online Data Platform</a>.</p>\n\n<p>When you evaluate the Enterprise edition, all we do is add a watermark to the screen for a second or two and display a message in the console. It is possible to evaluate the Enterprise edition features without any permission or any sales contacts.</p>\n\n<p>We only issue a trial license for evaluations so that people can see what the grid is like without the watermark, for example, when you want to demo the application to your users.</p>\n\n<p>No functionality is locked behind a license. You have access to all the functionality as soon as you add AG Grid to your product.</p>\n\n<p>And we have a page in the documentation if you are interested in the <a href=\"https://ag-grid.com/javascript-data-grid/licensing/\">differences between the Community Edition and the Enterprise edition</a>.</p>\n\n<h2>\n  \n  \n  Can you review the Data Grid source code?\n</h2>\n\n<p>Developers will want to review the quality of the component's code, not just the features and usability.</p>\n\n<p>That's one reason why AG Grid adopted an Open Source model for our code base.</p>\n\n<p>The community edition is open source and completely free to use, even in production. The enterprise edition source is also openly available on Github, so you can review the implementation and algorithms used to ensure they are what you would choose.</p>\n\n<p>This was one of the deciding factors that helped <a href=\"https://blog.ag-grid.com/proof-trading-webrush-podcast-using-ag-grid/\">Proof Trading adopt AG Grid</a>. They looked at our implementation and saw we were using the same algorithms and techniques they would, so why bother writing it from scratch? Better to adopt something built by another company and save yourself years of effort.</p>\n\n<p>Consider also the long-term escrow position. The open-source model we adopt is also an excellent safeguard for an escrow position, with Github as a third party holding the source code.</p>\n\n<p><a href=\"https://blog.ag-grid.com/proof-trading-webrush-podcast-using-ag-grid/\">Proof Trading used the community edition to evaluate AG Grid</a> as this was a hassle-free way to get started, and by reviewing the AG Grid source code, they were able to perform a very technical evaluation before adopting AG Grid in their high-frequency trading environment.</p>\n\n<h2>\n  \n  \n  Is there a free version available for commercial use?\n</h2>\n\n<p>Many companies only offer a 'trial' edition of their component. If you're evaluating their component and building your application with it, they hope you invest so much time in the trial that you'll feel committed enough to buy the product to keep using it.</p>\n\n<p>At AG Grid, we take the opposite view. We only want to charge for something that offers value above and beyond the open-source products on the market. So our Community Edition is open-source and completely free for production use.</p>\n\n<p>This makes it easy to compare with any open-source grid that is out there. Our Community Edition is open-source. It also happens to be programmed by professional programmers for whom this is their 100% day job, not a side project.</p>\n\n<p>You get all the benefits of open-source:</p>\n\n<ul>\n<li>Community Edition is free.</li>\n<li>Use it without restrictions.</li>\n<li>Fork the project and make your own version if you want to.</li>\n<li>Review the code.</li>\n</ul>\n\n<p>You also avoid all the drawbacks:</p>\n\n<ul>\n<li>Bugs don't get fixed because they are not important.</li>\n<li>Features requests are ignored because they don't fit the developers' needs.</li>\n</ul>\n\n<p>With AG Grid, the Community Edition functionality is also part of Enterprise Edition. We fix it and keep it up to date. We use customer feedback to drive the product forward and make it even better.</p>\n\n<p>Our Community Edition is not a side project; it is the core, and the heart and soul, of our commercial Enterprise product.</p>\n\n<h2>\n  \n  \n  How easy is it to get started?\n</h2>\n\n<p>Before getting hands-on and using it with any custom code, make sure to follow some of the Getting started information on the site.</p>\n\n<p>Most component documentation is a reference guide and requires some experience with the component to understand it fully.</p>\n\n<p>The Getting Started guides should be simple and fast to follow.</p>\n\n<p>AG Grid has Getting Started Guides and videos for every framework we support:</p>\n\n<ul>\n<li><a href=\"https://ag-grid.com/javascript-data-grid/getting-started/\">Getting Started Guide</a></li>\n<li><a href=\"https://ag-grid.com/javascript-data-grid/videos/\">Getting Started Videos</a></li>\n</ul>\n\n<p>We also have posts on our blog covering <a href=\"https://blog.ag-grid.com/tag/how-to/\">How To Guides for Features</a> and <a href=\"https://blog.ag-grid.com/tag/tutorial/\">longer tutorials that go in depth</a> to a specific application or domain.</p>\n\n<p>You'll also find that we have free training courses for <a href=\"https://thinkster.io/tutorials/fundamentals-of-ag-grid-with-angular\">Angular</a> and <a href=\"https://thinkster.io/tutorials/using-ag-grid-with-react-getting-started\">React</a>.</p>\n\n<h2>\n  \n  \n  Finally, Use It\n</h2>\n\n<p>After reading the documentation, watching YouTube Videos, and walking through a tutorial, you will finally be able to start using it in your production application.</p>\n\n<p>Some people prefer to create a Prototype Implementation that mirrors some of the production requirements:</p>\n\n<ul>\n<li>create a simple app</li>\n<li>add some basic customizations that demonstrate the capabilities required</li>\n<li>hook into the existing APIs and databases</li>\n</ul>\n\n<p>Other people prefer to add the component directly into their application to see how easy it will be to wire it up with their existing abstractions and API code.</p>\n\n<p>If you do this with AG Grid, then anything you build with the Community Edition, you can deploy directly into production and let your Users provide feedback on the component.</p>\n\n<h2>\n  \n  \n  Summary\n</h2>\n\n<p>Hopefully, this provided some ideas for evaluating a Data Grid.</p>\n\n<p>We know it can be very easy to pick the first open-source Data Grid that you find, start building with it, and then have to begin writing pull Requests to make it do what you want. That is, after all, what triggered the AG Grid to create its Data Grid in the first place.</p>\n\n<p>Because of this, we also understand the temptation to 'just build your own'; after all, that's what we did.</p>\n\n<p>But unless you plan to set up your own company to sell a Data Grid, we don't recommend this.</p>\n\n<p>Instead, identify the business value the development process aims to deliver, and think through the features and capabilities you will need to implement the value. Experiment with components that have proven themselves in the marketplace and plan to stick around for the long term.</p>\n\n<p>If you want to learn how some of our existing users approached the evaluation process, check out the <a href=\"https://blog.ag-grid.com/prisma-io-case-study/\">Prisma.io case study</a> which has many points about how they evaluated the product. Also, the <a href=\"https://blog.ag-grid.com/proof-trading-case-study/\">Proof Trading case study</a> with their evaluation points and they described their evaluation process on the <a href=\"https://blog.ag-grid.com/proof-trading-webrush-podcast-using-ag-grid/\">WebRush Podcast</a>.</p>\n\n",
      "category": "javascript"
  }
]